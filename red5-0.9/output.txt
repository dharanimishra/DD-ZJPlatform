Binary file ./bin/org/red5/server/api/stream/IClientStream.class matches
Binary file ./bin/org/red5/server/adapter/MultiThreadedApplicationAdapter.class matches
Binary file ./bin/org/red5/server/stream/PlayEngine.class matches
Binary file ./bin/org/red5/server/stream/ClientBroadcastStream.class matches
Binary file ./bin/org/red5/server/stream/ServerStream.class matches
Binary file ./bin/org/red5/server/stream/StreamingProxy.class matches
Binary file ./bin/org/red5/server/stream/StreamService.class matches
Binary file ./bin/org/red5/server/stream/consumer/FileConsumer.class matches
Binary file ./bin/org/red5/io/amf/Output.class matches
Binary file ./bin/org/red5/io/mock/Output.class matches
Binary file ./bin/org/red5/io/mp4/impl/MP4Reader.class matches
Binary file ./bin/org/red5/io/mp4/MP4Atom.class matches
Binary file ./bin/org/red5/io/amf3/Output.class matches
Binary file ./bin/org/red5/io/m4a/impl/M4AReader.class matches
./dist/webapps/root/demos/index.html:Publishing program that can be used to publish, record and view videos.
./dist/webapps/root/demos/index.html:Basic live video recorder.  Once you've stopped a recording, check out <code>$RED5_HOME/webapps/oflaDemo/streams</code> for your recorded FLV file.
Binary file ./dist/lib/groovy-all-1.5.7.jar matches
Binary file ./dist/lib/jruby-complete-1.1.6.jar matches
./doc/api/org/red5/server/api/stream/IStreamAwareScopeHandler.html:<div class="block">A broadcast stream starts being recorded.</div>
./doc/api/org/red5/server/api/stream/IStreamAwareScopeHandler.html:<div class="block">A broadcast stream stops being recorded.</div>
./doc/api/org/red5/server/api/stream/IStreamAwareScopeHandler.html:<div class="block">A broadcast stream starts being recorded. This will be called
./doc/api/org/red5/server/api/stream/IStreamAwareScopeHandler.html:<div class="block">A broadcast stream stops being recorded. This will be called
./doc/api/org/red5/server/api/stream/IStreamAwareScopeHandler.html: when the record-stop notification is sent to the Flash client.</div>
./doc/api/org/red5/server/api/stream/IStreamHandler.html:<div class="block">Called when a recording starts</div>
./doc/api/org/red5/server/api/stream/IStreamHandler.html:<div class="block">Called when a recording stops</div>
./doc/api/org/red5/server/api/stream/IStreamHandler.html:<div class="block">Called when a recording starts</div>
./doc/api/org/red5/server/api/stream/IStreamHandler.html:<div class="block">Called when a recording stops</div>
./doc/api/org/red5/server/api/stream/IStreamFilenameGenerator.html:<dl><dt><span class="strong">Parameters:</span></dt><dd><code>scope</code> - Scope to use</dd><dd><code>name</code> - Stream name</dd><dd><code>type</code> - Generation strategy (either playback or record)</dd>
./doc/api/org/red5/server/api/stream/IStreamFilenameGenerator.html:<dl><dt><span class="strong">Parameters:</span></dt><dd><code>scope</code> - Scope to use</dd><dd><code>name</code> - Stream filename</dd><dd><code>extension</code> - Extension</dd><dd><code>type</code> - Generation strategy (either playback or record)</dd>
./doc/api/org/red5/server/api/stream/class-use/.svn/text-base/IStream.html.svn-base:<div class="block">Called when a recording starts</div>
./doc/api/org/red5/server/api/stream/class-use/.svn/text-base/IStream.html.svn-base:<div class="block">Called when a recording stops</div>
./doc/api/org/red5/server/api/stream/class-use/.svn/text-base/IBroadcastStream.html.svn-base:<div class="block">A broadcast stream starts being recorded.</div>
./doc/api/org/red5/server/api/stream/class-use/.svn/text-base/IBroadcastStream.html.svn-base:<div class="block">A broadcast stream stops being recorded.</div>
./doc/api/org/red5/server/api/stream/class-use/IBroadcastStream.html:<div class="block">A broadcast stream starts being recorded.</div>
./doc/api/org/red5/server/api/stream/class-use/IBroadcastStream.html:<div class="block">A broadcast stream stops being recorded.</div>
./doc/api/org/red5/server/api/stream/class-use/IStream.html:<div class="block">Called when a recording starts</div>
./doc/api/org/red5/server/api/stream/class-use/IStream.html:<div class="block">Called when a recording stops</div>
./doc/api/org/red5/server/api/stream/.svn/text-base/IStreamAwareScopeHandler.html.svn-base:<div class="block">A broadcast stream starts being recorded.</div>
./doc/api/org/red5/server/api/stream/.svn/text-base/IStreamAwareScopeHandler.html.svn-base:<div class="block">A broadcast stream stops being recorded.</div>
./doc/api/org/red5/server/api/stream/.svn/text-base/IStreamAwareScopeHandler.html.svn-base:<div class="block">A broadcast stream starts being recorded. This will be called
./doc/api/org/red5/server/api/stream/.svn/text-base/IStreamAwareScopeHandler.html.svn-base:<div class="block">A broadcast stream stops being recorded. This will be called
./doc/api/org/red5/server/api/stream/.svn/text-base/IStreamAwareScopeHandler.html.svn-base: when the record-stop notification is sent to the Flash client.</div>
./doc/api/org/red5/server/api/stream/.svn/text-base/IStreamFilenameGenerator.html.svn-base:<dl><dt><span class="strong">Parameters:</span></dt><dd><code>scope</code> - Scope to use</dd><dd><code>name</code> - Stream name</dd><dd><code>type</code> - Generation strategy (either playback or record)</dd>
./doc/api/org/red5/server/api/stream/.svn/text-base/IStreamFilenameGenerator.html.svn-base:<dl><dt><span class="strong">Parameters:</span></dt><dd><code>scope</code> - Scope to use</dd><dd><code>name</code> - Stream filename</dd><dd><code>extension</code> - Extension</dd><dd><code>type</code> - Generation strategy (either playback or record)</dd>
./doc/api/org/red5/server/api/stream/.svn/text-base/IStreamHandler.html.svn-base:<div class="block">Called when a recording starts</div>
./doc/api/org/red5/server/api/stream/.svn/text-base/IStreamHandler.html.svn-base:<div class="block">Called when a recording stops</div>
./doc/api/org/red5/server/api/stream/.svn/text-base/IStreamHandler.html.svn-base:<div class="block">Called when a recording starts</div>
./doc/api/org/red5/server/api/stream/.svn/text-base/IStreamHandler.html.svn-base:<div class="block">Called when a recording stops</div>
./doc/api/org/red5/server/api/scope/class-use/.svn/text-base/IScope.html.svn-base:<div class="block">Get the file we'd be recording to based on scope and given name.</div>
./doc/api/org/red5/server/api/scope/class-use/IScope.html:<div class="block">Get the file we'd be recording to based on scope and given name.</div>
./doc/api/org/red5/server/adapter/MultiThreadedApplicationAdapter.html:<div class="block">A broadcast stream starts being recorded.</div>
./doc/api/org/red5/server/adapter/MultiThreadedApplicationAdapter.html:<div class="block">A broadcast stream stops being recorded.</div>
./doc/api/org/red5/server/adapter/MultiThreadedApplicationAdapter.html:<div class="block">A broadcast stream starts being recorded. This will be called
./doc/api/org/red5/server/adapter/MultiThreadedApplicationAdapter.html:<div class="block">A broadcast stream stops being recorded. This will be called
./doc/api/org/red5/server/adapter/MultiThreadedApplicationAdapter.html: when the record-stop notification is sent to the Flash client.</div>
./doc/api/org/red5/server/adapter/.svn/text-base/MultiThreadedApplicationAdapter.html.svn-base:<div class="block">A broadcast stream starts being recorded.</div>
./doc/api/org/red5/server/adapter/.svn/text-base/MultiThreadedApplicationAdapter.html.svn-base:<div class="block">A broadcast stream stops being recorded.</div>
./doc/api/org/red5/server/adapter/.svn/text-base/MultiThreadedApplicationAdapter.html.svn-base:<div class="block">A broadcast stream starts being recorded. This will be called
./doc/api/org/red5/server/adapter/.svn/text-base/MultiThreadedApplicationAdapter.html.svn-base:<div class="block">A broadcast stream stops being recorded. This will be called
./doc/api/org/red5/server/adapter/.svn/text-base/MultiThreadedApplicationAdapter.html.svn-base: when the record-stop notification is sent to the Flash client.</div>
./doc/api/org/red5/server/stream/ServerStream.html:<td class="colLast"><code><strong><a href="../../../../org/red5/server/stream/ServerStream.html#recordingFilename">recordingFilename</a></strong></code>
./doc/api/org/red5/server/stream/ServerStream.html:<div class="block">The filename we are recording to.</div>
./doc/api/org/red5/server/stream/ServerStream.html:<a name="recordingFilename">
./doc/api/org/red5/server/stream/ServerStream.html:<h4>recordingFilename</h4>
./doc/api/org/red5/server/stream/ServerStream.html:<pre>protected&nbsp;<a href="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</a> recordingFilename</pre>
./doc/api/org/red5/server/stream/ServerStream.html:<div class="block">The filename we are recording to.</div>
./doc/api/org/red5/server/stream/StreamService.html:<dl><dt><span class="strong">Parameters:</span></dt><dd><code>name</code> - - The name of a recorded file, or the identifier for live data. If</dd><dd><code>start</code> - - The start time, in seconds. Allowed values are -2, -1, 0, or a positive number. 
./doc/api/org/red5/server/stream/StreamService.html: The default value is -2, which looks for a live stream, then a recorded stream, and if it finds neither, 
./doc/api/org/red5/server/stream/StreamService.html: opens a live stream. If -1, plays only a live stream. If 0 or a positive number, plays a recorded stream, 
./doc/api/org/red5/server/stream/StreamService.html: The default value is -1, which plays a live or recorded stream until it ends. If 0, plays a single frame 
./doc/api/org/red5/server/stream/StreamService.html: that is start seconds from the beginning of a recorded stream. If a positive number, plays a live or recorded 
./doc/api/org/red5/server/stream/DefaultStreamFilenameGenerator.html:<dt><span class="strong">Parameters:</span></dt><dd><code>scope</code> - Scope to use</dd><dd><code>name</code> - Stream name</dd><dd><code>type</code> - Generation strategy (either playback or record)</dd>
./doc/api/org/red5/server/stream/DefaultStreamFilenameGenerator.html:<dt><span class="strong">Parameters:</span></dt><dd><code>scope</code> - Scope to use</dd><dd><code>name</code> - Stream filename</dd><dd><code>extension</code> - Extension</dd><dd><code>type</code> - Generation strategy (either playback or record)</dd>
./doc/api/org/red5/server/stream/ClientBroadcastStream.html: recording mode for live streams, that is, broadcasted stream has broadcast mode. It can be either
./doc/api/org/red5/server/stream/ClientBroadcastStream.html: "live" or "record" and latter causes server-side application to record broadcasted stream.
./doc/api/org/red5/server/stream/ClientBroadcastStream.html: Note that recorded streams are recorded as FLV files. The same is correct for audio, because
./doc/api/org/red5/server/stream/ClientBroadcastStream.html: This type of stream uses two different pipes for live streaming and recording.</div>
./doc/api/org/red5/server/stream/ClientBroadcastStream.html:<div class="block">Whether or not to automatically record the associated stream.</div>
./doc/api/org/red5/server/stream/ClientBroadcastStream.html:<div class="block">Get the file we'd be recording to based on scope and given name.</div>
./doc/api/org/red5/server/stream/ClientBroadcastStream.html:<div class="block">Stops any currently active recordings.</div>
./doc/api/org/red5/server/stream/ClientBroadcastStream.html:<div class="block">Whether or not to automatically record the associated stream.</div>
./doc/api/org/red5/server/stream/ClientBroadcastStream.html:<div class="block">Stops any currently active recordings.</div>
./doc/api/org/red5/server/stream/ClientBroadcastStream.html:<div class="block">Get the file we'd be recording to based on scope and given name.</div>
./doc/api/org/red5/server/stream/.svn/text-base/StreamService.html.svn-base:<dl><dt><span class="strong">Parameters:</span></dt><dd><code>name</code> - - The name of a recorded file, or the identifier for live data. If</dd><dd><code>start</code> - - The start time, in seconds. Allowed values are -2, -1, 0, or a positive number. 
./doc/api/org/red5/server/stream/.svn/text-base/StreamService.html.svn-base: The default value is -2, which looks for a live stream, then a recorded stream, and if it finds neither, 
./doc/api/org/red5/server/stream/.svn/text-base/StreamService.html.svn-base: opens a live stream. If -1, plays only a live stream. If 0 or a positive number, plays a recorded stream, 
./doc/api/org/red5/server/stream/.svn/text-base/StreamService.html.svn-base: The default value is -1, which plays a live or recorded stream until it ends. If 0, plays a single frame 
./doc/api/org/red5/server/stream/.svn/text-base/StreamService.html.svn-base: that is start seconds from the beginning of a recorded stream. If a positive number, plays a live or recorded 
./doc/api/org/red5/server/stream/.svn/text-base/ServerStream.html.svn-base:<td class="colLast"><code><strong><a href="../../../../org/red5/server/stream/ServerStream.html#recordingFilename">recordingFilename</a></strong></code>
./doc/api/org/red5/server/stream/.svn/text-base/ServerStream.html.svn-base:<div class="block">The filename we are recording to.</div>
./doc/api/org/red5/server/stream/.svn/text-base/ServerStream.html.svn-base:<a name="recordingFilename">
./doc/api/org/red5/server/stream/.svn/text-base/ServerStream.html.svn-base:<h4>recordingFilename</h4>
./doc/api/org/red5/server/stream/.svn/text-base/ServerStream.html.svn-base:<pre>protected&nbsp;<a href="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</a> recordingFilename</pre>
./doc/api/org/red5/server/stream/.svn/text-base/ServerStream.html.svn-base:<div class="block">The filename we are recording to.</div>
./doc/api/org/red5/server/stream/.svn/text-base/DefaultStreamFilenameGenerator.html.svn-base:<dt><span class="strong">Parameters:</span></dt><dd><code>scope</code> - Scope to use</dd><dd><code>name</code> - Stream name</dd><dd><code>type</code> - Generation strategy (either playback or record)</dd>
./doc/api/org/red5/server/stream/.svn/text-base/DefaultStreamFilenameGenerator.html.svn-base:<dt><span class="strong">Parameters:</span></dt><dd><code>scope</code> - Scope to use</dd><dd><code>name</code> - Stream filename</dd><dd><code>extension</code> - Extension</dd><dd><code>type</code> - Generation strategy (either playback or record)</dd>
./doc/api/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.html.svn-base: recording mode for live streams, that is, broadcasted stream has broadcast mode. It can be either
./doc/api/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.html.svn-base: "live" or "record" and latter causes server-side application to record broadcasted stream.
./doc/api/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.html.svn-base: Note that recorded streams are recorded as FLV files. The same is correct for audio, because
./doc/api/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.html.svn-base: This type of stream uses two different pipes for live streaming and recording.</div>
./doc/api/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.html.svn-base:<div class="block">Whether or not to automatically record the associated stream.</div>
./doc/api/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.html.svn-base:<div class="block">Get the file we'd be recording to based on scope and given name.</div>
./doc/api/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.html.svn-base:<div class="block">Stops any currently active recordings.</div>
./doc/api/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.html.svn-base:<div class="block">Whether or not to automatically record the associated stream.</div>
./doc/api/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.html.svn-base:<div class="block">Stops any currently active recordings.</div>
./doc/api/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.html.svn-base:<div class="block">Get the file we'd be recording to based on scope and given name.</div>
./doc/api/org/red5/server/stream/consumer/FileConsumer.html:<div class="block">Consumer that pushes messages to file. Used when recording live streams.</div>
./doc/api/org/red5/server/stream/consumer/.svn/text-base/FileConsumer.html.svn-base:<div class="block">Consumer that pushes messages to file. Used when recording live streams.</div>
./doc/api/org/red5/server/jmx/mxbeans/.svn/text-base/ClientBroadcastStreamMXBean.html.svn-base: recording mode for live streams, that is, broadcasted stream has broadcast mode. It can be either
./doc/api/org/red5/server/jmx/mxbeans/.svn/text-base/ClientBroadcastStreamMXBean.html.svn-base: "live" or "record" and latter causes server-side application to record broadcasted stream.
./doc/api/org/red5/server/jmx/mxbeans/.svn/text-base/ClientBroadcastStreamMXBean.html.svn-base: Note that recorded streams are recorded as FLV files. The same is correct for audio, because
./doc/api/org/red5/server/jmx/mxbeans/.svn/text-base/ClientBroadcastStreamMXBean.html.svn-base: This type of stream uses two different pipes for live streaming and recording.</div>
./doc/api/org/red5/server/jmx/mxbeans/ClientBroadcastStreamMXBean.html: recording mode for live streams, that is, broadcasted stream has broadcast mode. It can be either
./doc/api/org/red5/server/jmx/mxbeans/ClientBroadcastStreamMXBean.html: "live" or "record" and latter causes server-side application to record broadcasted stream.
./doc/api/org/red5/server/jmx/mxbeans/ClientBroadcastStreamMXBean.html: Note that recorded streams are recorded as FLV files. The same is correct for audio, because
./doc/api/org/red5/server/jmx/mxbeans/ClientBroadcastStreamMXBean.html: This type of stream uses two different pipes for live streaming and recording.</div>
./doc/api/org/red5/server/net/rtmp/status/StatusCodes.html:<div class="block">A recorded stream failed to delete.</div>
./doc/api/org/red5/server/net/rtmp/status/StatusCodes.html:<div class="block">A recorded stream was deleted successfully.</div>
./doc/api/org/red5/server/net/rtmp/status/StatusCodes.html:<div class="block">The subscriber has used the seek command to move to a particular location in the recorded stream.</div>
./doc/api/org/red5/server/net/rtmp/status/StatusCodes.html:<div class="block">An attempt to record a stream failed</div>
./doc/api/org/red5/server/net/rtmp/status/StatusCodes.html:<div class="block">An attempt was made to record a read-only stream</div>
./doc/api/org/red5/server/net/rtmp/status/StatusCodes.html:<div class="block">The subscriber has used the seek command to move to a particular location in the recorded stream.</div>
./doc/api/org/red5/server/net/rtmp/status/StatusCodes.html:<div class="block">A recorded stream was deleted successfully.</div>
./doc/api/org/red5/server/net/rtmp/status/StatusCodes.html:<div class="block">A recorded stream failed to delete.</div>
./doc/api/org/red5/server/net/rtmp/status/StatusCodes.html:<div class="block">An attempt was made to record a read-only stream</div>
./doc/api/org/red5/server/net/rtmp/status/StatusCodes.html:<div class="block">An attempt to record a stream failed</div>
./doc/api/org/red5/server/net/rtmp/status/StatusCodes.html:<div class="block">The subscriber has used the seek command to move to a particular location in the recorded stream.</div>
./doc/api/org/red5/server/net/rtmp/status/StatusCodes.html:<div class="block">The subscriber has used the seek command to move to a particular location in the recorded stream.</div>
./doc/api/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.html.svn-base:<div class="block">A recorded stream failed to delete.</div>
./doc/api/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.html.svn-base:<div class="block">A recorded stream was deleted successfully.</div>
./doc/api/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.html.svn-base:<div class="block">The subscriber has used the seek command to move to a particular location in the recorded stream.</div>
./doc/api/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.html.svn-base:<div class="block">An attempt to record a stream failed</div>
./doc/api/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.html.svn-base:<div class="block">An attempt was made to record a read-only stream</div>
./doc/api/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.html.svn-base:<div class="block">The subscriber has used the seek command to move to a particular location in the recorded stream.</div>
./doc/api/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.html.svn-base:<div class="block">A recorded stream was deleted successfully.</div>
./doc/api/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.html.svn-base:<div class="block">A recorded stream failed to delete.</div>
./doc/api/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.html.svn-base:<div class="block">An attempt was made to record a read-only stream</div>
./doc/api/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.html.svn-base:<div class="block">An attempt to record a stream failed</div>
./doc/api/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.html.svn-base:<div class="block">The subscriber has used the seek command to move to a particular location in the recorded stream.</div>
./doc/api/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.html.svn-base:<div class="block">The subscriber has used the seek command to move to a particular location in the recorded stream.</div>
./doc/api/org/red5/server/net/rtmp/event/Ping.html:<div class="block">Recorded stream. Sent by server to indicate a recorded stream.</div>
./doc/api/org/red5/server/net/rtmp/event/.svn/text-base/Ping.html.svn-base:<div class="block">Recorded stream. Sent by server to indicate a recorded stream.</div>
./doc/api/org/red5/io/amf/.svn/text-base/Output.html.svn-base:<td class="colLast"><code><strong><a href="../../../../org/red5/io/amf/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/amf/.svn/text-base/Output.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/amf/.svn/text-base/Output.html.svn-base:<pre>public&nbsp;void&nbsp;writeRecordSet(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/amf/.svn/text-base/Output.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/amf/.svn/text-base/Output.html.svn-base:<dt><span class="strong">Parameters:</span></dt><dd><code>recordset</code> - Recordset to write.</dd><dd><code>serializer</code> - Serializer to use for subobjects.</dd></dl>
./doc/api/org/red5/io/amf/Output.html:<td class="colLast"><code><strong><a href="../../../../org/red5/io/amf/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/amf/Output.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/amf/Output.html:<pre>public&nbsp;void&nbsp;writeRecordSet(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/amf/Output.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/amf/Output.html:<dt><span class="strong">Parameters:</span></dt><dd><code>recordset</code> - Recordset to write.</dd><dd><code>serializer</code> - Serializer to use for subobjects.</dd></dl>
./doc/api/org/red5/io/object/RecordSet.html:<dt><span class="strong">See Also:</span></dt><dd><a href="http://www.osflash.org/amf/recordset">osflash.org documentation</a></dd></dl>
./doc/api/org/red5/io/object/RecordSet.html:<div class="block">Creates recordset from Input object</div>
./doc/api/org/red5/io/object/RecordSet.html:<div class="block">Return a list containing the names of the columns in the recordset.</div>
./doc/api/org/red5/io/object/RecordSet.html:<div class="block">Return a specified item from the recordset.</div>
./doc/api/org/red5/io/object/RecordSet.html:<div class="block">Creates recordset from Input object</div>
./doc/api/org/red5/io/object/RecordSet.html:<div class="block">Return a list containing the names of the columns in the recordset.</div>
./doc/api/org/red5/io/object/RecordSet.html:<div class="block">Return a specified item from the recordset.  If the item is not
./doc/api/org/red5/io/object/RecordSet.html:<dt><span class="strong">Returns:</span></dt><dd>Item from recordset</dd></dl>
./doc/api/org/red5/io/object/class-use/RecordSet.html:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/amf/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/RecordSet.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/RecordSet.html:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/amf3/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/RecordSet.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/RecordSet.html:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/mock/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/RecordSet.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/RecordSet.html:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/object/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/RecordSet.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/Serializer.html:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/amf/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/Serializer.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/Serializer.html:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/amf3/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/Serializer.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/Serializer.html:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/mock/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/Serializer.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/Serializer.html:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/object/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/Serializer.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/Input.html:<div class="block">Creates recordset from Input object</div>
./doc/api/org/red5/io/object/class-use/Input.html:<div class="block">Creates recordset page from Input object</div>
./doc/api/org/red5/io/object/class-use/.svn/text-base/Input.html.svn-base:<div class="block">Creates recordset from Input object</div>
./doc/api/org/red5/io/object/class-use/.svn/text-base/Input.html.svn-base:<div class="block">Creates recordset page from Input object</div>
./doc/api/org/red5/io/object/class-use/.svn/text-base/RecordSet.html.svn-base:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/amf/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/.svn/text-base/RecordSet.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/.svn/text-base/RecordSet.html.svn-base:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/amf3/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/.svn/text-base/RecordSet.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/.svn/text-base/RecordSet.html.svn-base:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/mock/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/.svn/text-base/RecordSet.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/.svn/text-base/RecordSet.html.svn-base:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/object/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/.svn/text-base/RecordSet.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/.svn/text-base/Serializer.html.svn-base:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/amf/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/.svn/text-base/Serializer.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/.svn/text-base/Serializer.html.svn-base:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/amf3/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/.svn/text-base/Serializer.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/.svn/text-base/Serializer.html.svn-base:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/mock/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/.svn/text-base/Serializer.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/class-use/.svn/text-base/Serializer.html.svn-base:<td class="colLast"><span class="strong">Output.</span><code><strong><a href="../../../../../org/red5/io/object/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/class-use/.svn/text-base/Serializer.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/.svn/text-base/RecordSet.html.svn-base:<dt><span class="strong">See Also:</span></dt><dd><a href="http://www.osflash.org/amf/recordset">osflash.org documentation</a></dd></dl>
./doc/api/org/red5/io/object/.svn/text-base/RecordSet.html.svn-base:<div class="block">Creates recordset from Input object</div>
./doc/api/org/red5/io/object/.svn/text-base/RecordSet.html.svn-base:<div class="block">Return a list containing the names of the columns in the recordset.</div>
./doc/api/org/red5/io/object/.svn/text-base/RecordSet.html.svn-base:<div class="block">Return a specified item from the recordset.</div>
./doc/api/org/red5/io/object/.svn/text-base/RecordSet.html.svn-base:<div class="block">Creates recordset from Input object</div>
./doc/api/org/red5/io/object/.svn/text-base/RecordSet.html.svn-base:<div class="block">Return a list containing the names of the columns in the recordset.</div>
./doc/api/org/red5/io/object/.svn/text-base/RecordSet.html.svn-base:<div class="block">Return a specified item from the recordset.  If the item is not
./doc/api/org/red5/io/object/.svn/text-base/RecordSet.html.svn-base:<dt><span class="strong">Returns:</span></dt><dd>Item from recordset</dd></dl>
./doc/api/org/red5/io/object/.svn/text-base/Output.html.svn-base:<td class="colLast"><code><strong><a href="../../../../org/red5/io/object/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/.svn/text-base/Output.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/.svn/text-base/Output.html.svn-base:<pre>void&nbsp;writeRecordSet(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/.svn/text-base/Output.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/.svn/text-base/Output.html.svn-base:<dl><dt><span class="strong">Parameters:</span></dt><dd><code>recordset</code> - Recordset to write.</dd><dd><code>serializer</code> - Serializer to use for subobjects.</dd></dl>
./doc/api/org/red5/io/object/.svn/text-base/RecordSetPage.html.svn-base:<dt><span class="strong">See Also:</span></dt><dd><a href="http://www.osflash.org/amf/recordset">osflash.org documentation</a></dd></dl>
./doc/api/org/red5/io/object/.svn/text-base/RecordSetPage.html.svn-base:<div class="block">Creates recordset page from Input object</div>
./doc/api/org/red5/io/object/.svn/text-base/RecordSetPage.html.svn-base:<div class="block">Getter for recordset cursor</div>
./doc/api/org/red5/io/object/.svn/text-base/RecordSetPage.html.svn-base:<div class="block">Creates recordset page from Input object</div>
./doc/api/org/red5/io/object/.svn/text-base/RecordSetPage.html.svn-base:<div class="block">Getter for recordset cursor</div>
./doc/api/org/red5/io/object/Output.html:<td class="colLast"><code><strong><a href="../../../../org/red5/io/object/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/Output.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/Output.html:<pre>void&nbsp;writeRecordSet(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/object/Output.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/object/Output.html:<dl><dt><span class="strong">Parameters:</span></dt><dd><code>recordset</code> - Recordset to write.</dd><dd><code>serializer</code> - Serializer to use for subobjects.</dd></dl>
./doc/api/org/red5/io/object/RecordSetPage.html:<dt><span class="strong">See Also:</span></dt><dd><a href="http://www.osflash.org/amf/recordset">osflash.org documentation</a></dd></dl>
./doc/api/org/red5/io/object/RecordSetPage.html:<div class="block">Creates recordset page from Input object</div>
./doc/api/org/red5/io/object/RecordSetPage.html:<div class="block">Getter for recordset cursor</div>
./doc/api/org/red5/io/object/RecordSetPage.html:<div class="block">Creates recordset page from Input object</div>
./doc/api/org/red5/io/object/RecordSetPage.html:<div class="block">Getter for recordset cursor</div>
./doc/api/org/red5/io/mock/.svn/text-base/Output.html.svn-base:<td class="colLast"><code><strong><a href="../../../../org/red5/io/mock/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/mock/.svn/text-base/Output.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/mock/.svn/text-base/Output.html.svn-base:<pre>public&nbsp;void&nbsp;writeRecordSet(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/mock/.svn/text-base/Output.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/mock/.svn/text-base/Output.html.svn-base:<dt><span class="strong">Parameters:</span></dt><dd><code>recordset</code> - Recordset to write.</dd><dd><code>serializer</code> - Serializer to use for subobjects.</dd></dl>
./doc/api/org/red5/io/mock/Output.html:<td class="colLast"><code><strong><a href="../../../../org/red5/io/mock/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/mock/Output.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/mock/Output.html:<pre>public&nbsp;void&nbsp;writeRecordSet(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/mock/Output.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/mock/Output.html:<dt><span class="strong">Parameters:</span></dt><dd><code>recordset</code> - Recordset to write.</dd><dd><code>serializer</code> - Serializer to use for subobjects.</dd></dl>
./doc/api/org/red5/io/mp4/MP4Atom.html:<td class="colLast"><code><strong><a href="../../../../org/red5/io/mp4/MP4Atom.html#records">records</a></strong></code>
./doc/api/org/red5/io/mp4/MP4Atom.html:<a name="records">
./doc/api/org/red5/io/mp4/MP4Atom.html:<h4>records</h4>
./doc/api/org/red5/io/mp4/MP4Atom.html:<pre>protected&nbsp;<a href="http://download.oracle.com/javase/6/docs/api/java/util/Vector.html?is-external=true" title="class or interface in java.util">Vector</a>&lt;<a href="../../../../org/red5/io/mp4/MP4Atom.Record.html" title="class in org.red5.io.mp4">MP4Atom.Record</a>&gt; records</pre>
./doc/api/org/red5/io/mp4/class-use/MP4Atom.Record.html:<td class="colLast"><span class="strong">MP4Atom.</span><code><strong><a href="../../../../../org/red5/io/mp4/MP4Atom.html#records">records</a></strong></code>
./doc/api/org/red5/io/mp4/class-use/.svn/text-base/MP4Atom.Record.html.svn-base:<td class="colLast"><span class="strong">MP4Atom.</span><code><strong><a href="../../../../../org/red5/io/mp4/MP4Atom.html#records">records</a></strong></code>
./doc/api/org/red5/io/mp4/.svn/text-base/MP4Atom.html.svn-base:<td class="colLast"><code><strong><a href="../../../../org/red5/io/mp4/MP4Atom.html#records">records</a></strong></code>
./doc/api/org/red5/io/mp4/.svn/text-base/MP4Atom.html.svn-base:<a name="records">
./doc/api/org/red5/io/mp4/.svn/text-base/MP4Atom.html.svn-base:<h4>records</h4>
./doc/api/org/red5/io/mp4/.svn/text-base/MP4Atom.html.svn-base:<pre>protected&nbsp;<a href="http://download.oracle.com/javase/6/docs/api/java/util/Vector.html?is-external=true" title="class or interface in java.util">Vector</a>&lt;<a href="../../../../org/red5/io/mp4/MP4Atom.Record.html" title="class in org.red5.io.mp4">MP4Atom.Record</a>&gt; records</pre>
./doc/api/org/red5/io/amf3/.svn/text-base/Output.html.svn-base:<td class="colLast"><code><strong><a href="../../../../org/red5/io/amf3/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/amf3/.svn/text-base/Output.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/amf3/.svn/text-base/Output.html.svn-base:<pre>public&nbsp;void&nbsp;writeRecordSet(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/amf3/.svn/text-base/Output.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/amf3/.svn/text-base/Output.html.svn-base:<dt><span class="strong">Parameters:</span></dt><dd><code>recordset</code> - Recordset to write.</dd><dd><code>serializer</code> - Serializer to use for subobjects.</dd></dl>
./doc/api/org/red5/io/amf3/Output.html:<td class="colLast"><code><strong><a href="../../../../org/red5/io/amf3/Output.html#writeRecordSet(org.red5.io.object.RecordSet, org.red5.io.object.Serializer)">writeRecordSet</a></strong>(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/amf3/Output.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/amf3/Output.html:<pre>public&nbsp;void&nbsp;writeRecordSet(<a href="../../../../org/red5/io/object/RecordSet.html" title="class in org.red5.io.object">RecordSet</a>&nbsp;recordset,
./doc/api/org/red5/io/amf3/Output.html:<div class="block">Write recordset.</div>
./doc/api/org/red5/io/amf3/Output.html:<dt><span class="strong">Parameters:</span></dt><dd><code>recordset</code> - Recordset to write.</dd><dd><code>serializer</code> - Serializer to use for subobjects.</dd></dl>
./doc/api/constant-values.html:<td class="colLast"><code>"record"</code></td>
./doc/api/.svn/text-base/constant-values.html.svn-base:<td class="colLast"><code>"record"</code></td>
./doc/api/index-files/index-23.html:<div class="block">Write recordset.</div>
./doc/api/index-files/index-23.html:<div class="block">Write recordset.</div>
./doc/api/index-files/index-23.html:<div class="block">Write recordset.</div>
./doc/api/index-files/index-23.html:<div class="block">Write recordset.</div>
./doc/api/index-files/index-14.html:<div class="block">A recorded stream failed to delete.</div>
./doc/api/index-files/index-14.html:<div class="block">A recorded stream was deleted successfully.</div>
./doc/api/index-files/index-14.html:<div class="block">The subscriber has used the seek command to move to a particular location in the recorded stream.</div>
./doc/api/index-files/index-14.html:<div class="block">An attempt to record a stream failed</div>
./doc/api/index-files/index-14.html:<div class="block">An attempt was made to record a read-only stream</div>
./doc/api/index-files/index-14.html:<div class="block">The subscriber has used the seek command to move to a particular location in the recorded stream.</div>
./doc/api/index-files/index-19.html:<div class="block">Stops any currently active recordings.</div>
./doc/api/index-files/index-19.html:<div class="block">A broadcast stream starts being recorded.</div>
./doc/api/index-files/index-19.html:<div class="block">A broadcast stream stops being recorded.</div>
./doc/api/index-files/index-7.html:<div class="block">Return a list containing the names of the columns in the recordset.</div>
./doc/api/index-files/index-7.html:<div class="block">Getter for recordset cursor</div>
./doc/api/index-files/index-7.html:<div class="block">Return a specified item from the recordset.</div>
./doc/api/index-files/index-7.html:<div class="block">Get the file we'd be recording to based on scope and given name.</div>
./doc/api/index-files/index-18.html:<dt><span class="strong"><a href="../org/red5/server/stream/ServerStream.html#recordingFilename">recordingFilename</a></span> - Variable in class org.red5.server.stream.<a href="../org/red5/server/stream/ServerStream.html" title="class in org.red5.server.stream">ServerStream</a></dt>
./doc/api/index-files/index-18.html:<div class="block">The filename we are recording to.</div>
./doc/api/index-files/index-18.html:<dt><span class="strong"><a href="../org/red5/io/mp4/MP4Atom.html#records">records</a></span> - Variable in class org.red5.io.mp4.<a href="../org/red5/io/mp4/MP4Atom.html" title="class in org.red5.io.mp4">MP4Atom</a></dt>
./doc/api/index-files/index-18.html:<div class="block">Creates recordset from Input object</div>
./doc/api/index-files/index-18.html:<div class="block">Creates recordset page from Input object</div>
./doc/api/index-files/index-15.html:<div class="block">Called when a recording starts</div>
./doc/api/index-files/index-15.html:<div class="block">Called when a recording stops</div>
./doc/api/index-files/.svn/text-base/index-23.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/index-files/.svn/text-base/index-23.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/index-files/.svn/text-base/index-23.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/index-files/.svn/text-base/index-23.html.svn-base:<div class="block">Write recordset.</div>
./doc/api/index-files/.svn/text-base/index-18.html.svn-base:<dt><span class="strong"><a href="../org/red5/server/stream/ServerStream.html#recordingFilename">recordingFilename</a></span> - Variable in class org.red5.server.stream.<a href="../org/red5/server/stream/ServerStream.html" title="class in org.red5.server.stream">ServerStream</a></dt>
./doc/api/index-files/.svn/text-base/index-18.html.svn-base:<div class="block">The filename we are recording to.</div>
./doc/api/index-files/.svn/text-base/index-18.html.svn-base:<dt><span class="strong"><a href="../org/red5/io/mp4/MP4Atom.html#records">records</a></span> - Variable in class org.red5.io.mp4.<a href="../org/red5/io/mp4/MP4Atom.html" title="class in org.red5.io.mp4">MP4Atom</a></dt>
./doc/api/index-files/.svn/text-base/index-18.html.svn-base:<div class="block">Creates recordset from Input object</div>
./doc/api/index-files/.svn/text-base/index-18.html.svn-base:<div class="block">Creates recordset page from Input object</div>
./doc/api/index-files/.svn/text-base/index-1.html.svn-base:<div class="block">Whether or not to automatically record the associated stream.</div>
./doc/api/index-files/.svn/text-base/index-14.html.svn-base:<div class="block">A recorded stream failed to delete.</div>
./doc/api/index-files/.svn/text-base/index-14.html.svn-base:<div class="block">A recorded stream was deleted successfully.</div>
./doc/api/index-files/.svn/text-base/index-14.html.svn-base:<div class="block">The subscriber has used the seek command to move to a particular location in the recorded stream.</div>
./doc/api/index-files/.svn/text-base/index-14.html.svn-base:<div class="block">An attempt to record a stream failed</div>
./doc/api/index-files/.svn/text-base/index-14.html.svn-base:<div class="block">An attempt was made to record a read-only stream</div>
./doc/api/index-files/.svn/text-base/index-14.html.svn-base:<div class="block">The subscriber has used the seek command to move to a particular location in the recorded stream.</div>
./doc/api/index-files/.svn/text-base/index-15.html.svn-base:<div class="block">Called when a recording starts</div>
./doc/api/index-files/.svn/text-base/index-15.html.svn-base:<div class="block">Called when a recording stops</div>
./doc/api/index-files/.svn/text-base/index-7.html.svn-base:<div class="block">Return a list containing the names of the columns in the recordset.</div>
./doc/api/index-files/.svn/text-base/index-7.html.svn-base:<div class="block">Getter for recordset cursor</div>
./doc/api/index-files/.svn/text-base/index-7.html.svn-base:<div class="block">Return a specified item from the recordset.</div>
./doc/api/index-files/.svn/text-base/index-7.html.svn-base:<div class="block">Get the file we'd be recording to based on scope and given name.</div>
./doc/api/index-files/.svn/text-base/index-19.html.svn-base:<div class="block">Stops any currently active recordings.</div>
./doc/api/index-files/.svn/text-base/index-19.html.svn-base:<div class="block">A broadcast stream starts being recorded.</div>
./doc/api/index-files/.svn/text-base/index-19.html.svn-base:<div class="block">A broadcast stream stops being recorded.</div>
./doc/api/index-files/index-1.html:<div class="block">Whether or not to automatically record the associated stream.</div>
./doc/reference/src/en-US/core/stream_paths.xml:		record to custom directories other than the default streams folder inside the webapp. </para>
./doc/reference/src/en-US/core/stream_paths.xml:			filenames for VOD streams that should be played or recorded. 
./doc/reference/src/en-US/core/stream_paths.xml: /** Path that will store recorded videos. */ 
./doc/reference/src/en-US/core/stream_paths.xml: public String recordPath = "recordedStreams/"; 
./doc/reference/src/en-US/core/stream_paths.xml:   filename = recordPath + name; 
./doc/reference/src/en-US/core/stream_paths.xml:		<para>The above class will generate filenames for recorded streams like recordedStreams/ 
./doc/reference/src/en-US/core/stream_paths.xml: recordPath = path; 
./doc/reference/src/en-US/core/stream_paths.xml:   <property name="recordPath" value="recordedStreams/" /> 
./doc/reference/src/en-US/core/stream_paths.xml:   <property name="recordPath" value="/path/to/recordedStreams/" /> 
./doc/reference/src/en-US/core/stream_paths.xml:   <property name="recordPath" value="${recordPath}" /> 
./doc/reference/src/en-US/core/stream_paths.xml:recordPath=recordedStreams/ 
./doc/reference/src/en-US/core/stream_paths.xml:recordPath=/path/to/recordedStreams/ 
./doc/reference/src/en-US/core/security.xml:		<para>Read (playback) and write (publishing/recording) access to streams is protected separately 
./doc/reference/src/en-US/core/security.xml:			<para>In most applications that allow the user to publish and/or record streams, this access must 
./doc/reference/src/en-US/core/testing.xml:					<link xl:href="http://asunit.org/">AsUnit</link>) that make sure end-to-end interaction with Adobe's flash player works as expected. For example, we test that we can connect from Flash via RTMP, we can play back pre-recorded FLV files, and we can publish from a Camera. 
./doc/reference/src/en-US/core/.svn/text-base/stream_paths.xml.svn-base:		record to custom directories other than the default streams folder inside the webapp. </para>
./doc/reference/src/en-US/core/.svn/text-base/stream_paths.xml.svn-base:			filenames for VOD streams that should be played or recorded. 
./doc/reference/src/en-US/core/.svn/text-base/stream_paths.xml.svn-base: /** Path that will store recorded videos. */ 
./doc/reference/src/en-US/core/.svn/text-base/stream_paths.xml.svn-base: public String recordPath = "recordedStreams/"; 
./doc/reference/src/en-US/core/.svn/text-base/stream_paths.xml.svn-base:   filename = recordPath + name; 
./doc/reference/src/en-US/core/.svn/text-base/stream_paths.xml.svn-base:		<para>The above class will generate filenames for recorded streams like recordedStreams/ 
./doc/reference/src/en-US/core/.svn/text-base/stream_paths.xml.svn-base: recordPath = path; 
./doc/reference/src/en-US/core/.svn/text-base/stream_paths.xml.svn-base:   <property name="recordPath" value="recordedStreams/" /> 
./doc/reference/src/en-US/core/.svn/text-base/stream_paths.xml.svn-base:   <property name="recordPath" value="/path/to/recordedStreams/" /> 
./doc/reference/src/en-US/core/.svn/text-base/stream_paths.xml.svn-base:   <property name="recordPath" value="${recordPath}" /> 
./doc/reference/src/en-US/core/.svn/text-base/stream_paths.xml.svn-base:recordPath=recordedStreams/ 
./doc/reference/src/en-US/core/.svn/text-base/stream_paths.xml.svn-base:recordPath=/path/to/recordedStreams/ 
./doc/reference/src/en-US/core/.svn/text-base/security.xml.svn-base:		<para>Read (playback) and write (publishing/recording) access to streams is protected separately 
./doc/reference/src/en-US/core/.svn/text-base/security.xml.svn-base:			<para>In most applications that allow the user to publish and/or record streams, this access must 
./doc/reference/src/en-US/core/.svn/text-base/testing.xml.svn-base:					<link xl:href="http://asunit.org/">AsUnit</link>) that make sure end-to-end interaction with Adobe's flash player works as expected. For example, we test that we can connect from Flash via RTMP, we can play back pre-recorded FLV files, and we can publish from a Camera. 
./doc/reference/src/en-US/core/.svn/text-base/demo_applications.xml.svn-base:				<para>The start microtime is recorded, along with an initial number of bytes sent to the client. </para>
./doc/reference/src/en-US/core/demo_applications.xml:				<para>The start microtime is recorded, along with an initial number of bytes sent to the client. </para>
./doc/reference/src/en-US/getting-started/.svn/text-base/frequently_asked_questions.xml.svn-base:						<command xl:href="#detect-end-recording">How to detect the end of recording?</command>
./doc/reference/src/en-US/getting-started/.svn/text-base/frequently_asked_questions.xml.svn-base:						<command xl:href="#record-streams-from">How can I record RTMP streams from Red5?</command>
./doc/reference/src/en-US/getting-started/.svn/text-base/frequently_asked_questions.xml.svn-base:			<section xml:id="detect-end-recording">
./doc/reference/src/en-US/getting-started/.svn/text-base/frequently_asked_questions.xml.svn-base:				<title>How to detect the end of recording ?</title>
./doc/reference/src/en-US/getting-started/.svn/text-base/frequently_asked_questions.xml.svn-base:			<section xml:id="record-streams-from">
./doc/reference/src/en-US/getting-started/.svn/text-base/frequently_asked_questions.xml.svn-base:				<title>How can I record RTMP streams from Red5?</title>
./doc/reference/src/en-US/getting-started/.svn/text-base/frequently_asked_questions.xml.svn-base:					<link xl:href="http://ptrthomas.wordpress.com/2008/04/19/how-to-record-rtmp-flash-video-streams-using-red5">http://ptrthomas.wordpress.com/2008/04/19/how-to-record-rtmp-flash-video-streams-using-red5</link>
./doc/reference/src/en-US/getting-started/.svn/text-base/frequently_asked_questions.xml.svn-base:							<link xl:href="http://blipback.com">http://blipback.com</link> BlipBack is a video comment widget that you can embed on any number of social network sites or blogs you]have. Blipback lets you or your friends record short video comments directly to your page.
./doc/reference/src/en-US/getting-started/.svn/text-base/frequently_asked_questions.xml.svn-base:							<link xl:href="http://facebook.com/video">http://facebook.com/video</link> Video uploading/recording/messaging system that allows you to record a video on the upload page or]send a private message to another user and attach a video.
./doc/reference/src/en-US/getting-started/frequently_asked_questions.xml:						<command xl:href="#detect-end-recording">How to detect the end of recording?</command>
./doc/reference/src/en-US/getting-started/frequently_asked_questions.xml:						<command xl:href="#record-streams-from">How can I record RTMP streams from Red5?</command>
./doc/reference/src/en-US/getting-started/frequently_asked_questions.xml:			<section xml:id="detect-end-recording">
./doc/reference/src/en-US/getting-started/frequently_asked_questions.xml:				<title>How to detect the end of recording ?</title>
./doc/reference/src/en-US/getting-started/frequently_asked_questions.xml:			<section xml:id="record-streams-from">
./doc/reference/src/en-US/getting-started/frequently_asked_questions.xml:				<title>How can I record RTMP streams from Red5?</title>
./doc/reference/src/en-US/getting-started/frequently_asked_questions.xml:					<link xl:href="http://ptrthomas.wordpress.com/2008/04/19/how-to-record-rtmp-flash-video-streams-using-red5">http://ptrthomas.wordpress.com/2008/04/19/how-to-record-rtmp-flash-video-streams-using-red5</link>
./doc/reference/src/en-US/getting-started/frequently_asked_questions.xml:							<link xl:href="http://blipback.com">http://blipback.com</link> BlipBack is a video comment widget that you can embed on any number of social network sites or blogs you]have. Blipback lets you or your friends record short video comments directly to your page.
./doc/reference/src/en-US/getting-started/frequently_asked_questions.xml:							<link xl:href="http://facebook.com/video">http://facebook.com/video</link> Video uploading/recording/messaging system that allows you to record a video on the upload page or]send a private message to another user and attach a video.
./doc/reference/html/index.html:	</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e664">2.2.2. Documentation</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#official-documentation">2.2.2.1. Where is the official documentation?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#documentation-in-pdf">2.2.2.2. Can I get the documentation in PDF format?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#latest-javadocs">2.2.2.3. Where can I find the latest javadocs?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e684">2.2.3. Configuration</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#disable-policy-checking">2.2.3.1. How to disable Socket policy checking for 443 (rtmps and https)?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e692">2.2.4. Streaming</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#stream-custom-directories">2.2.4.1. How do I stream to/from custom directories?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#detect-end-recording">2.2.4.2. How to detect the end of recording ?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#record-streams-from">2.2.4.3. How can I record RTMP streams from Red5?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#multicast-streaming">2.2.4.4. Does Red5 support multicast streaming?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#streamusing-udp">2.2.4.5. Can Red5 stream using UDP?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e729">2.2.5. Codecs</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#supported-codecs">2.2.5.1. What Codecs does Red5 Support?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#what-is-rtmfp">2.2.5.2. What is RTMFP and when will it be available in Red5?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e789">2.2.6. Database</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#supported-databases">2.2.6.1. What databases are supported?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#hibernate-with-red5">2.2.6.2. Can I use Hibernate with Red5?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e802">2.2.7. Scripting</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#scripting-languages">2.2.7.1. What scripting languages are available?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#actionscript1-support">2.2.7.2. Does Red5 support Actionscript 1?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#actionscript3-support">2.2.7.3. Does Red5 support Actionscript 3?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e820">2.2.8. Shared Objects</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#remote-sharedobjects">2.2.8.1. How do you setup a Remote SharedObject?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e831">2.2.9. Legal</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#licence-information">2.2.9.1. Licence Information</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#red5-legal">2.2.9.2. Is Red5 Legal?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#war-documentation">2.2.10. Red5 WAR version</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#d0e855">2.2.10.1. Is there any documentation on the Red5 war version?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e863">2.2.11. Misc</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#irc-channel">2.2.11.1. Is there an IRC channel?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#web-examples">2.2.11.2. Are there any examples on the web?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#professional-support">2.2.11.3. Is there any professional support?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#hosting-solutions">2.2.11.4. Are there hosting solutions?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#forum">2.2.11.5. Are there forums?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#jedai">2.2.11.6. What is Jedai?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#frameworks">2.2.11.7. Are there any frameworks that I can start with?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#development-tools">2.2.11.8. Are there development tools?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#paperworld3d">2.2.11.9. What is Paperworld3D ?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#groups">2.2.11.10. What Red5 groups can I join?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e1146">2.2.12. Troubleshooting</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#long-handshake">2.2.12.1. Why am I receiving "closing due to long handshake?</a></span></dt></dl></dd></dl></dd></dl></dd><dt><span class="chapter"><a href="configuration-files.html">3. Configuration Files</a></span></dt><dd><dl><dt><span class="section"><a href="configuration-files.html#d0e1167">3.1. Directory "conf"</a></span></dt><dd><dl><dt><span class="section"><a href="configuration-files.html#d0e1170">3.1.1. jetty.xml</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1180">3.1.2. keystore</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1185">3.1.3. log4j.properties</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1195">3.1.4. realm.properties (Jetty)</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1206">3.1.5. tomcat-users.xml (Tomcat)</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1225">3.1.6. red5.globals</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1232">3.1.7. red5.properties</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1237">3.1.8. red5.xml</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1254">3.1.9. red5-common.xml</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1289">3.1.10. red5-core.xml</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1306">3.1.11. red5-rtmpt.xml</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1316">3.1.12. web.xml (Tomcat)</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1324">3.1.13. web-default.xml (Jetty)</a></span></dt></dl></dd><dt><span class="section"><a href="configuration-files.html#d0e1329">3.2. Webapp config directory</a></span></dt><dd><dl><dt><span class="section"><a href="configuration-files.html#d0e1332">3.2.1. red5-web.xml</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="migration-guide.html">4. Migration Guide</a></span></dt><dd><dl><dt><span class="section"><a href="migration-guide.html#d0e1362">4.1. Application callbacks</a></span></dt><dd><dl><dt><span class="section"><a href="migration-guide.html#d0e1367">4.1.1. Interface IScopeHandler</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1375">4.1.2. Class ApplicationAdapter</a></span></dt><dd><dl><dt><span class="section"><a href="migration-guide.html#d0e1424">4.1.2.1. Execution order of connection methods</a></span></dt></dl></dd><dt><span class="section"><a href="migration-guide.html#d0e1470">4.1.3. Accepting / rejecting clients</a></span></dt></dl></dd><dt><span class="section"><a href="migration-guide.html#d0e1480">4.2. Current connection and client</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1497">4.3. Additional handlers</a></span></dt><dd><dl><dt><span class="section"><a href="migration-guide.html#MigrationGuideHandlersinconfigurationfiles">4.3.1. Handlers in configuration files</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1528">4.3.2. Handlers from application code</a></span></dt></dl></dd><dt><span class="section"><a href="migration-guide.html#d0e1545">4.4. Calls to client methods</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1572">4.5. SharedObjects</a></span></dt><dd><dl><dt><span class="section"><a href="migration-guide.html#d0e1595">4.5.1. Serverside change listeners</a></span></dt><dt><span class="section"><a href="migration-guide.html#MigrationGuideChangingfromapplicationcode">4.5.2. Changing from application code</a></span></dt></dl></dd><dt><span class="section"><a href="migration-guide.html#d0e1639">4.6. Persistence</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1669">4.7. Periodic events</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1693">4.8. Remoting</a></span></dt><dd><dl><dt><span class="section"><a href="migration-guide.html#d0e1698">4.8.1. Remoting server</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1720">4.8.2. Remoting client</a></span></dt></dl></dd><dt><span class="section"><a href="migration-guide.html#d0e1743">4.9. Streams</a></span></dt></dl></dd><dt><span class="chapter"><a href="libraries.html">5. Red5 Libraries</a></span></dt><dd><dl><dt><span class="section"><a href="libraries.html#d0e1751">5.1. Spring scripting support</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1770">5.2. Groovy</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1789">5.3. Beanshell</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1805">5.4. Ruby</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1821">5.5. Jython / Python</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1834">5.6. Java 5 Libraries</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1839">5.7. Script related JSR's</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1849">5.8. Javascript / Rhino</a></span></dt></dl></dd><dt><span class="chapter"><a href="building.html">6. Building Red5</a></span></dt><dd><dl><dt><span class="section"><a href="building.html#d0e1868">6.1. Build Environment Setup</a></span></dt><dd><dl><dt><span class="section"><a href="building.html#d0e1871">6.1.1. Ant</a></span></dt><dt><span class="section"><a href="building.html#d0e1885">6.1.2. Java</a></span></dt><dt><span class="section"><a href="building.html#d0e1912">6.1.3. Red5</a></span></dt></dl></dd><dt><span class="section"><a href="building.html#d0e1931">6.2. Building</a></span></dt><dd><dl><dt><span class="section"><a href="building.html#d0e1934">6.2.1. Getting Red5 Source</a></span></dt><dt><span class="section"><a href="building.html#d0e1958">6.2.2. Getting Red5 Demo Applications Source</a></span></dt><dt><span class="section"><a href="building.html#d0e1971">6.2.3. Getting Red5 Flash Demo Source</a></span></dt><dt><span class="section"><a href="building.html#d0e1984">6.2.4. Running the ant build</a></span></dt><dt><span class="section"><a href="building.html#d0e1991">6.2.5. Current Ant Targets</a></span></dt><dt><span class="section"><a href="building.html#d0e2145">6.2.6. Ant and Ivy</a></span></dt></dl></dd><dt><span class="section"><a href="building.html#d0e2156">6.3. How to build with eclipse</a></span></dt><dd><dl><dt><span class="section"><a href="building.html#d0e2164">6.3.1. Recommended Eclipse Plugins</a></span></dt><dt><span class="section"><a href="building.html#d0e2188">6.3.2. Importing the Red5 Project</a></span></dt><dt><span class="section"><a href="building.html#d0e2295">6.3.3. Updating the Red5 source from Eclipse.</a></span></dt><dt><span class="section"><a href="building.html#d0e2331">6.3.4. </a></span></dt><dt><span class="section"><a href="building.html#d0e2462">6.3.5. Ant, Ivy and Eclipse</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="releasing.html">7. Releasing Red5</a></span></dt><dt><span class="chapter"><a href="system-requirements.html">8. Recommended System Requirements</a></span></dt><dd><dl><dt><span class="section"><a href="system-requirements.html#d0e2555">8.1. 
./doc/reference/html/stream-paths.html:		record to custom directories other than the default streams folder inside the webapp. </p><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e3362"></a>12.1.&nbsp;Filename generator service</h2></div></div></div><p>Red5 uses a concept called scope services for functionality that is provided for a certain 
./doc/reference/html/stream-paths.html:			filenames for VOD streams that should be played or recorded. 
./doc/reference/html/stream-paths.html: <font xmlns="http://www.w3.org/TR/xhtml1/transitional" font-style="italic" color="grey">/** Path that will store recorded videos. */</font> 
./doc/reference/html/stream-paths.html: <font xmlns="http://www.w3.org/TR/xhtml1/transitional" font-weight="bold" color="blue">public</font> String recordPath = <b class="hl-string"><i style="color:red">"recordedStreams/"</i></b>; 
./doc/reference/html/stream-paths.html:   filename = recordPath + name; 
./doc/reference/html/stream-paths.html:</pre><p>The above class will generate filenames for recorded streams like recordedStreams/ 
./doc/reference/html/stream-paths.html: recordPath = path; 
./doc/reference/html/stream-paths.html:   <b class="hl-tag" style="color: blue">&lt;property</b> <span class="hl-attribute" style="color: blue">name</span>=<span class="hl-value" style="color: blue">"recordPath"</span> <span class="hl-attribute" style="color: blue">value</span>=<span class="hl-value" style="color: blue">"recordedStreams/"</span><b class="hl-tag" style="color: blue"> /&gt;</b> 
./doc/reference/html/stream-paths.html:   <b class="hl-tag" style="color: blue">&lt;property</b> <span class="hl-attribute" style="color: blue">name</span>=<span class="hl-value" style="color: blue">"recordPath"</span> <span class="hl-attribute" style="color: blue">value</span>=<span class="hl-value" style="color: blue">"/path/to/recordedStreams/"</span><b class="hl-tag" style="color: blue"> /&gt;</b> 
./doc/reference/html/stream-paths.html:   <b class="hl-tag" style="color: blue">&lt;property</b> <span class="hl-attribute" style="color: blue">name</span>=<span class="hl-value" style="color: blue">"recordPath"</span> <span class="hl-attribute" style="color: blue">value</span>=<span class="hl-value" style="color: blue">"${recordPath}"</span><b class="hl-tag" style="color: blue"> /&gt;</b> 
./doc/reference/html/stream-paths.html:recordPath=recordedStreams/&nbsp;<br>
./doc/reference/html/stream-paths.html:recordPath=/path/to/recordedStreams/&nbsp;<br>
./doc/reference/html/frequently-asked-questions.html:						<span class="command"><strong><a class="command" href="frequently-asked-questions.html#detect-end-recording" title="2.2.4.2.&nbsp;How to detect the end of recording ?">How to detect the end of recording?</a></strong></span>
./doc/reference/html/frequently-asked-questions.html:						<span class="command"><strong><a class="command" href="frequently-asked-questions.html#record-streams-from" title="2.2.4.3.&nbsp;How can I record RTMP streams from Red5?">How can I record RTMP streams from Red5?</a></strong></span>
./doc/reference/html/frequently-asked-questions.html:				</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="detect-end-recording"></a>2.2.4.2.&nbsp;How to detect the end of recording ?</h4></div></div></div><p>See the 
./doc/reference/html/frequently-asked-questions.html:				</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="record-streams-from"></a>2.2.4.3.&nbsp;How can I record RTMP streams from Red5?</h4></div></div></div><p>See: 
./doc/reference/html/frequently-asked-questions.html:					<a class="link" href="http://ptrthomas.wordpress.com/2008/04/19/how-to-record-rtmp-flash-video-streams-using-red5" target="_top">http://ptrthomas.wordpress.com/2008/04/19/how-to-record-rtmp-flash-video-streams-using-red5</a>
./doc/reference/html/frequently-asked-questions.html:							<a class="link" href="http://blipback.com" target="_top">http://blipback.com</a> BlipBack is a video comment widget that you can embed on any number of social network sites or blogs you]have. Blipback lets you or your friends record short video comments directly to your page.
./doc/reference/html/frequently-asked-questions.html:							<a class="link" href="http://facebook.com/video" target="_top">http://facebook.com/video</a> Video uploading/recording/messaging system that allows you to record a video on the upload page or]send a private message to another user and attach a video.
./doc/reference/html/testing.html:					<a class="link" href="http://asunit.org/" target="_top">AsUnit</a>) that make sure end-to-end interaction with Adobe's flash player works as expected. For example, we test that we can connect from Flash via RTMP, we can play back pre-recorded FLV files, and we can publish from a Camera. 
./doc/reference/html/.svn/text-base/demo-applications.html.svn-base:	</pre><p>The start microtime is recorded, along with an initial number of bytes sent to the client. </p><p>To initiate the handshake with the client method 
./doc/reference/html/.svn/text-base/frequently-asked-questions.html.svn-base:						<span class="command"><strong><a class="command" href="frequently-asked-questions.html#detect-end-recording" title="2.2.4.2.&nbsp;How to detect the end of recording ?">How to detect the end of recording?</a></strong></span>
./doc/reference/html/.svn/text-base/frequently-asked-questions.html.svn-base:						<span class="command"><strong><a class="command" href="frequently-asked-questions.html#record-streams-from" title="2.2.4.3.&nbsp;How can I record RTMP streams from Red5?">How can I record RTMP streams from Red5?</a></strong></span>
./doc/reference/html/.svn/text-base/frequently-asked-questions.html.svn-base:				</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="detect-end-recording"></a>2.2.4.2.&nbsp;How to detect the end of recording ?</h4></div></div></div><p>See the 
./doc/reference/html/.svn/text-base/frequently-asked-questions.html.svn-base:				</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="record-streams-from"></a>2.2.4.3.&nbsp;How can I record RTMP streams from Red5?</h4></div></div></div><p>See: 
./doc/reference/html/.svn/text-base/frequently-asked-questions.html.svn-base:					<a class="link" href="http://ptrthomas.wordpress.com/2008/04/19/how-to-record-rtmp-flash-video-streams-using-red5" target="_top">http://ptrthomas.wordpress.com/2008/04/19/how-to-record-rtmp-flash-video-streams-using-red5</a>
./doc/reference/html/.svn/text-base/frequently-asked-questions.html.svn-base:							<a class="link" href="http://blipback.com" target="_top">http://blipback.com</a> BlipBack is a video comment widget that you can embed on any number of social network sites or blogs you]have. Blipback lets you or your friends record short video comments directly to your page.
./doc/reference/html/.svn/text-base/frequently-asked-questions.html.svn-base:							<a class="link" href="http://facebook.com/video" target="_top">http://facebook.com/video</a> Video uploading/recording/messaging system that allows you to record a video on the upload page or]send a private message to another user and attach a video.
./doc/reference/html/.svn/text-base/index.html.svn-base:	</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e664">2.2.2. Documentation</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#official-documentation">2.2.2.1. Where is the official documentation?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#documentation-in-pdf">2.2.2.2. Can I get the documentation in PDF format?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#latest-javadocs">2.2.2.3. Where can I find the latest javadocs?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e684">2.2.3. Configuration</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#disable-policy-checking">2.2.3.1. How to disable Socket policy checking for 443 (rtmps and https)?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e692">2.2.4. Streaming</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#stream-custom-directories">2.2.4.1. How do I stream to/from custom directories?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#detect-end-recording">2.2.4.2. How to detect the end of recording ?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#record-streams-from">2.2.4.3. How can I record RTMP streams from Red5?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#multicast-streaming">2.2.4.4. Does Red5 support multicast streaming?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#streamusing-udp">2.2.4.5. Can Red5 stream using UDP?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e729">2.2.5. Codecs</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#supported-codecs">2.2.5.1. What Codecs does Red5 Support?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#what-is-rtmfp">2.2.5.2. What is RTMFP and when will it be available in Red5?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e789">2.2.6. Database</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#supported-databases">2.2.6.1. What databases are supported?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#hibernate-with-red5">2.2.6.2. Can I use Hibernate with Red5?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e802">2.2.7. Scripting</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#scripting-languages">2.2.7.1. What scripting languages are available?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#actionscript1-support">2.2.7.2. Does Red5 support Actionscript 1?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#actionscript3-support">2.2.7.3. Does Red5 support Actionscript 3?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e820">2.2.8. Shared Objects</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#remote-sharedobjects">2.2.8.1. How do you setup a Remote SharedObject?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e831">2.2.9. Legal</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#licence-information">2.2.9.1. Licence Information</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#red5-legal">2.2.9.2. Is Red5 Legal?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#war-documentation">2.2.10. Red5 WAR version</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#d0e855">2.2.10.1. Is there any documentation on the Red5 war version?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e863">2.2.11. Misc</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#irc-channel">2.2.11.1. Is there an IRC channel?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#web-examples">2.2.11.2. Are there any examples on the web?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#professional-support">2.2.11.3. Is there any professional support?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#hosting-solutions">2.2.11.4. Are there hosting solutions?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#forum">2.2.11.5. Are there forums?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#jedai">2.2.11.6. What is Jedai?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#frameworks">2.2.11.7. Are there any frameworks that I can start with?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#development-tools">2.2.11.8. Are there development tools?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#paperworld3d">2.2.11.9. What is Paperworld3D ?</a></span></dt><dt><span class="section"><a href="frequently-asked-questions.html#groups">2.2.11.10. What Red5 groups can I join?</a></span></dt></dl></dd><dt><span class="section"><a href="frequently-asked-questions.html#d0e1146">2.2.12. Troubleshooting</a></span></dt><dd><dl><dt><span class="section"><a href="frequently-asked-questions.html#long-handshake">2.2.12.1. Why am I receiving "closing due to long handshake?</a></span></dt></dl></dd></dl></dd></dl></dd><dt><span class="chapter"><a href="configuration-files.html">3. Configuration Files</a></span></dt><dd><dl><dt><span class="section"><a href="configuration-files.html#d0e1167">3.1. Directory "conf"</a></span></dt><dd><dl><dt><span class="section"><a href="configuration-files.html#d0e1170">3.1.1. jetty.xml</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1180">3.1.2. keystore</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1185">3.1.3. log4j.properties</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1195">3.1.4. realm.properties (Jetty)</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1206">3.1.5. tomcat-users.xml (Tomcat)</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1225">3.1.6. red5.globals</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1232">3.1.7. red5.properties</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1237">3.1.8. red5.xml</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1254">3.1.9. red5-common.xml</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1289">3.1.10. red5-core.xml</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1306">3.1.11. red5-rtmpt.xml</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1316">3.1.12. web.xml (Tomcat)</a></span></dt><dt><span class="section"><a href="configuration-files.html#d0e1324">3.1.13. web-default.xml (Jetty)</a></span></dt></dl></dd><dt><span class="section"><a href="configuration-files.html#d0e1329">3.2. Webapp config directory</a></span></dt><dd><dl><dt><span class="section"><a href="configuration-files.html#d0e1332">3.2.1. red5-web.xml</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="migration-guide.html">4. Migration Guide</a></span></dt><dd><dl><dt><span class="section"><a href="migration-guide.html#d0e1362">4.1. Application callbacks</a></span></dt><dd><dl><dt><span class="section"><a href="migration-guide.html#d0e1367">4.1.1. Interface IScopeHandler</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1375">4.1.2. Class ApplicationAdapter</a></span></dt><dd><dl><dt><span class="section"><a href="migration-guide.html#d0e1424">4.1.2.1. Execution order of connection methods</a></span></dt></dl></dd><dt><span class="section"><a href="migration-guide.html#d0e1470">4.1.3. Accepting / rejecting clients</a></span></dt></dl></dd><dt><span class="section"><a href="migration-guide.html#d0e1480">4.2. Current connection and client</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1497">4.3. Additional handlers</a></span></dt><dd><dl><dt><span class="section"><a href="migration-guide.html#MigrationGuideHandlersinconfigurationfiles">4.3.1. Handlers in configuration files</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1528">4.3.2. Handlers from application code</a></span></dt></dl></dd><dt><span class="section"><a href="migration-guide.html#d0e1545">4.4. Calls to client methods</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1572">4.5. SharedObjects</a></span></dt><dd><dl><dt><span class="section"><a href="migration-guide.html#d0e1595">4.5.1. Serverside change listeners</a></span></dt><dt><span class="section"><a href="migration-guide.html#MigrationGuideChangingfromapplicationcode">4.5.2. Changing from application code</a></span></dt></dl></dd><dt><span class="section"><a href="migration-guide.html#d0e1639">4.6. Persistence</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1669">4.7. Periodic events</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1693">4.8. Remoting</a></span></dt><dd><dl><dt><span class="section"><a href="migration-guide.html#d0e1698">4.8.1. Remoting server</a></span></dt><dt><span class="section"><a href="migration-guide.html#d0e1720">4.8.2. Remoting client</a></span></dt></dl></dd><dt><span class="section"><a href="migration-guide.html#d0e1743">4.9. Streams</a></span></dt></dl></dd><dt><span class="chapter"><a href="libraries.html">5. Red5 Libraries</a></span></dt><dd><dl><dt><span class="section"><a href="libraries.html#d0e1751">5.1. Spring scripting support</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1770">5.2. Groovy</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1789">5.3. Beanshell</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1805">5.4. Ruby</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1821">5.5. Jython / Python</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1834">5.6. Java 5 Libraries</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1839">5.7. Script related JSR's</a></span></dt><dt><span class="section"><a href="libraries.html#d0e1849">5.8. Javascript / Rhino</a></span></dt></dl></dd><dt><span class="chapter"><a href="building.html">6. Building Red5</a></span></dt><dd><dl><dt><span class="section"><a href="building.html#d0e1868">6.1. Build Environment Setup</a></span></dt><dd><dl><dt><span class="section"><a href="building.html#d0e1871">6.1.1. Ant</a></span></dt><dt><span class="section"><a href="building.html#d0e1885">6.1.2. Java</a></span></dt><dt><span class="section"><a href="building.html#d0e1912">6.1.3. Red5</a></span></dt></dl></dd><dt><span class="section"><a href="building.html#d0e1931">6.2. Building</a></span></dt><dd><dl><dt><span class="section"><a href="building.html#d0e1934">6.2.1. Getting Red5 Source</a></span></dt><dt><span class="section"><a href="building.html#d0e1958">6.2.2. Getting Red5 Demo Applications Source</a></span></dt><dt><span class="section"><a href="building.html#d0e1971">6.2.3. Getting Red5 Flash Demo Source</a></span></dt><dt><span class="section"><a href="building.html#d0e1984">6.2.4. Running the ant build</a></span></dt><dt><span class="section"><a href="building.html#d0e1991">6.2.5. Current Ant Targets</a></span></dt><dt><span class="section"><a href="building.html#d0e2145">6.2.6. Ant and Ivy</a></span></dt></dl></dd><dt><span class="section"><a href="building.html#d0e2156">6.3. How to build with eclipse</a></span></dt><dd><dl><dt><span class="section"><a href="building.html#d0e2164">6.3.1. Recommended Eclipse Plugins</a></span></dt><dt><span class="section"><a href="building.html#d0e2188">6.3.2. Importing the Red5 Project</a></span></dt><dt><span class="section"><a href="building.html#d0e2295">6.3.3. Updating the Red5 source from Eclipse.</a></span></dt><dt><span class="section"><a href="building.html#d0e2331">6.3.4. </a></span></dt><dt><span class="section"><a href="building.html#d0e2462">6.3.5. Ant, Ivy and Eclipse</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="releasing.html">7. Releasing Red5</a></span></dt><dt><span class="chapter"><a href="system-requirements.html">8. Recommended System Requirements</a></span></dt><dd><dl><dt><span class="section"><a href="system-requirements.html#d0e2555">8.1. 
./doc/reference/html/.svn/text-base/security.html.svn-base:		Server 2. </p><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e3420"></a>13.1.&nbsp;Stream Security</h2></div></div></div><p>Read (playback) and write (publishing/recording) access to streams is protected separately 
./doc/reference/html/.svn/text-base/security.html.svn-base:			</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="d0e3451"></a>13.1.2.&nbsp;Stream publishing security</h3></div></div></div><p>In most applications that allow the user to publish and/or record streams, this access must 
./doc/reference/html/.svn/text-base/testing.html.svn-base:					<a class="link" href="http://asunit.org/" target="_top">AsUnit</a>) that make sure end-to-end interaction with Adobe's flash player works as expected. For example, we test that we can connect from Flash via RTMP, we can play back pre-recorded FLV files, and we can publish from a Camera. 
./doc/reference/html/.svn/text-base/stream-paths.html.svn-base:		record to custom directories other than the default streams folder inside the webapp. </p><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e3362"></a>12.1.&nbsp;Filename generator service</h2></div></div></div><p>Red5 uses a concept called scope services for functionality that is provided for a certain 
./doc/reference/html/.svn/text-base/stream-paths.html.svn-base:			filenames for VOD streams that should be played or recorded. 
./doc/reference/html/.svn/text-base/stream-paths.html.svn-base: <font xmlns="http://www.w3.org/TR/xhtml1/transitional" font-style="italic" color="grey">/** Path that will store recorded videos. */</font> 
./doc/reference/html/.svn/text-base/stream-paths.html.svn-base: <font xmlns="http://www.w3.org/TR/xhtml1/transitional" font-weight="bold" color="blue">public</font> String recordPath = <b class="hl-string"><i style="color:red">"recordedStreams/"</i></b>; 
./doc/reference/html/.svn/text-base/stream-paths.html.svn-base:   filename = recordPath + name; 
./doc/reference/html/.svn/text-base/stream-paths.html.svn-base:</pre><p>The above class will generate filenames for recorded streams like recordedStreams/ 
./doc/reference/html/.svn/text-base/stream-paths.html.svn-base: recordPath = path; 
./doc/reference/html/.svn/text-base/stream-paths.html.svn-base:   <b class="hl-tag" style="color: blue">&lt;property</b> <span class="hl-attribute" style="color: blue">name</span>=<span class="hl-value" style="color: blue">"recordPath"</span> <span class="hl-attribute" style="color: blue">value</span>=<span class="hl-value" style="color: blue">"recordedStreams/"</span><b class="hl-tag" style="color: blue"> /&gt;</b> 
./doc/reference/html/.svn/text-base/stream-paths.html.svn-base:   <b class="hl-tag" style="color: blue">&lt;property</b> <span class="hl-attribute" style="color: blue">name</span>=<span class="hl-value" style="color: blue">"recordPath"</span> <span class="hl-attribute" style="color: blue">value</span>=<span class="hl-value" style="color: blue">"/path/to/recordedStreams/"</span><b class="hl-tag" style="color: blue"> /&gt;</b> 
./doc/reference/html/.svn/text-base/stream-paths.html.svn-base:   <b class="hl-tag" style="color: blue">&lt;property</b> <span class="hl-attribute" style="color: blue">name</span>=<span class="hl-value" style="color: blue">"recordPath"</span> <span class="hl-attribute" style="color: blue">value</span>=<span class="hl-value" style="color: blue">"${recordPath}"</span><b class="hl-tag" style="color: blue"> /&gt;</b> 
./doc/reference/html/.svn/text-base/stream-paths.html.svn-base:recordPath=recordedStreams/&nbsp;<br>
./doc/reference/html/.svn/text-base/stream-paths.html.svn-base:recordPath=/path/to/recordedStreams/&nbsp;<br>
./doc/reference/html/demo-applications.html:	</pre><p>The start microtime is recorded, along with an initial number of bytes sent to the client. </p><p>To initiate the handshake with the client method 
./doc/reference/html/security.html:		Server 2. </p><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e3420"></a>13.1.&nbsp;Stream Security</h2></div></div></div><p>Read (playback) and write (publishing/recording) access to streams is protected separately 
./doc/reference/html/security.html:			</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="d0e3451"></a>13.1.2.&nbsp;Stream publishing security</h3></div></div></div><p>In most applications that allow the user to publish and/or record streams, this access must 
Binary file ./doc/reference/pdf/red5-reference-0.9.pdf matches
Binary file ./doc/reference/pdf/.svn/text-base/red5-reference-0.9.pdf.svn-base matches
./doc/changelog.txt:- Fixed bug with recording, where meta files were not removed when using the same name
./doc/changelog.txt:- Fixed #657 Timestamp corruption in recorded .flv, when stream also subscribed
./doc/changelog.txt:- NetStream.send in record mode not working (Jira APPSERVER-329)
./doc/changelog.txt:- "onMetaData" is only written to newly recorded FLV files and contains
./doc/changelog.txt:- Newly recorded files start with an "onMetaData" tag containing the
./doc/changelog.txt:  recording (Jira APPSERVER-64)
./doc/changelog.txt:- API: IStreamFilenameGenerator differs between playback and recording
./doc/changelog.txt:- "NetStream.Publish.BadName" is sent if two clients try to publish/record
./doc/changelog.txt:- Playing a stream while being recorded now works (Jira SN-4, SN-13)
./doc/changelog.txt:- "IBroadcastStream" knows about the filename it is being recorded to
./doc/changelog.txt:- "NetStream.send" events are properly recorded
./doc/changelog.txt:- Destination of recorded streams can be customized (Trac #73)
./doc/changelog.txt:- Timestamps of recorded .flv files were wrong sometimes (Trac #78)
./doc/changelog.txt:- Directories for recorded files are created if they don't exist (Trac #20)
./doc/projectplan/Red5 1.0 Project Plan.html:                <td style="padding-left: 48px;" class="wrap">1.2.4.3) digital video recordiing</td>
./doc/projectplan/Red5 1.0 Project Plan.html:                <td style="padding-left: 48px;" class="wrap">1.2.4.16) Server-side recording, including H.264</td>
./doc/projectplan/.svn/text-base/Red5 1.0 Project Plan.html.svn-base:                <td style="padding-left: 48px;" class="wrap">1.2.4.3) digital video recordiing</td>
./doc/projectplan/.svn/text-base/Red5 1.0 Project Plan.html.svn-base:                <td style="padding-left: 48px;" class="wrap">1.2.4.16) Server-side recording, including H.264</td>
./doc/.svn/text-base/changelog.txt.svn-base:- Fixed bug with recording, where meta files were not removed when using the same name
./doc/.svn/text-base/changelog.txt.svn-base:- Fixed #657 Timestamp corruption in recorded .flv, when stream also subscribed
./doc/.svn/text-base/changelog.txt.svn-base:- NetStream.send in record mode not working (Jira APPSERVER-329)
./doc/.svn/text-base/changelog.txt.svn-base:- "onMetaData" is only written to newly recorded FLV files and contains
./doc/.svn/text-base/changelog.txt.svn-base:- Newly recorded files start with an "onMetaData" tag containing the
./doc/.svn/text-base/changelog.txt.svn-base:  recording (Jira APPSERVER-64)
./doc/.svn/text-base/changelog.txt.svn-base:- API: IStreamFilenameGenerator differs between playback and recording
./doc/.svn/text-base/changelog.txt.svn-base:- "NetStream.Publish.BadName" is sent if two clients try to publish/record
./doc/.svn/text-base/changelog.txt.svn-base:- Playing a stream while being recorded now works (Jira SN-4, SN-13)
./doc/.svn/text-base/changelog.txt.svn-base:- "IBroadcastStream" knows about the filename it is being recorded to
./doc/.svn/text-base/changelog.txt.svn-base:- "NetStream.send" events are properly recorded
./doc/.svn/text-base/changelog.txt.svn-base:- Destination of recorded streams can be customized (Trac #73)
./doc/.svn/text-base/changelog.txt.svn-base:- Timestamps of recorded .flv files were wrong sometimes (Trac #78)
./doc/.svn/text-base/changelog.txt.svn-base:- Directories for recorded files are created if they don't exist (Trac #20)
Binary file ./lib/groovy-all-1.5.7.jar matches
Binary file ./lib/jruby-complete-1.1.6.jar matches
./src/org/red5/logging/W3CAppender.java:        //record                    stream                              
./src/org/red5/logging/W3CAppender.java:        //recordstop                stream                              
./src/org/red5/logging/W3CAppender.java:		//x-file-name      	full file path of recorded stream               
./src/org/red5/logging/.svn/text-base/W3CAppender.java.svn-base:        //record                    stream                              
./src/org/red5/logging/.svn/text-base/W3CAppender.java.svn-base:        //recordstop                stream                              
./src/org/red5/logging/.svn/text-base/W3CAppender.java.svn-base:		//x-file-name      	full file path of recorded stream               
./src/org/red5/server/api/stream/IStreamFilenameGenerator.java:     * @param type            Generation strategy (either playback or record)
./src/org/red5/server/api/stream/IStreamFilenameGenerator.java:     * @param type            Generation strategy (either playback or record)
./src/org/red5/server/api/stream/IClientStream.java:	public static final String MODE_RECORD = "record";
./src/org/red5/server/api/stream/.svn/text-base/IStreamHandler.java.svn-base:	 * Called when a recording starts
./src/org/red5/server/api/stream/.svn/text-base/IStreamHandler.java.svn-base:	 * Called when a recording stops
./src/org/red5/server/api/stream/.svn/text-base/IStreamFilenameGenerator.java.svn-base:     * @param type            Generation strategy (either playback or record)
./src/org/red5/server/api/stream/.svn/text-base/IStreamFilenameGenerator.java.svn-base:     * @param type            Generation strategy (either playback or record)
./src/org/red5/server/api/stream/.svn/text-base/IStreamAwareScopeHandler.java.svn-base:	 * A broadcast stream starts being recorded. This will be called
./src/org/red5/server/api/stream/.svn/text-base/IClientStream.java.svn-base:	public static final String MODE_RECORD = "record";
./src/org/red5/server/api/stream/IStreamHandler.java:	 * Called when a recording starts
./src/org/red5/server/api/stream/IStreamHandler.java:	 * Called when a recording stops
./src/org/red5/server/api/stream/IStreamAwareScopeHandler.java:	 * A broadcast stream starts being recorded. This will be called
./src/org/red5/server/adapter/MultiThreadedApplicationAdapter.java:		String recordingName = stream.getSaveFilename();
./src/org/red5/server/adapter/MultiThreadedApplicationAdapter.java:		// if its not null then we did a recording
./src/org/red5/server/adapter/MultiThreadedApplicationAdapter.java:		if (recordingName != null) {
./src/org/red5/server/adapter/MultiThreadedApplicationAdapter.java:							"W3C x-category:stream x-event:recordstop c-ip:{} cs-bytes:{} sc-bytes:{} x-sname:{} x-file-name:{} x-file-length:{} x-file-size:{}",
./src/org/red5/server/adapter/MultiThreadedApplicationAdapter.java:									recordingName, publishDuration,
./src/org/red5/server/adapter/MultiThreadedApplicationAdapter.java:			File file = new File(webappsPath, getName() + '/' + recordingName);
./src/org/red5/server/adapter/MultiThreadedApplicationAdapter.java:		log.info("W3C x-category:stream x-event:record c-ip:{} x-sname:{} x-file-name:{}",
./src/org/red5/server/adapter/.svn/text-base/MultiThreadedApplicationAdapter.java.svn-base:		String recordingName = stream.getSaveFilename();
./src/org/red5/server/adapter/.svn/text-base/MultiThreadedApplicationAdapter.java.svn-base:		// if its not null then we did a recording
./src/org/red5/server/adapter/.svn/text-base/MultiThreadedApplicationAdapter.java.svn-base:		if (recordingName != null) {
./src/org/red5/server/adapter/.svn/text-base/MultiThreadedApplicationAdapter.java.svn-base:							"W3C x-category:stream x-event:recordstop c-ip:{} cs-bytes:{} sc-bytes:{} x-sname:{} x-file-name:{} x-file-length:{} x-file-size:{}",
./src/org/red5/server/adapter/.svn/text-base/MultiThreadedApplicationAdapter.java.svn-base:									recordingName, publishDuration,
./src/org/red5/server/adapter/.svn/text-base/MultiThreadedApplicationAdapter.java.svn-base:			File file = new File(webappsPath, getName() + '/' + recordingName);
./src/org/red5/server/adapter/.svn/text-base/MultiThreadedApplicationAdapter.java.svn-base:		log.info("W3C x-category:stream x-event:record c-ip:{} x-sname:{} x-file-name:{}",
./src/org/red5/server/stream/StreamingProxy.java:	public static final String RECORD = "record";
./src/org/red5/server/stream/PlayEngine.java:		// The default value is -2, which looks for a live stream, then a recorded stream, 
./src/org/red5/server/stream/PlayEngine.java:		// If 0 or a positive number, plays a recorded stream, beginning start seconds in.
./src/org/red5/server/stream/PlayEngine.java:		// -2: live then recorded, -1: live, >=0: recorded
./src/org/red5/server/stream/PlayEngine.java:			Ping recorded = new Ping();
./src/org/red5/server/stream/PlayEngine.java:			recorded.setEventType(Ping.RECORDED_STREAM);
./src/org/red5/server/stream/PlayEngine.java:			recorded.setValue2(streamId);
./src/org/red5/server/stream/PlayEngine.java:			RTMPMessage recordedMsg = new RTMPMessage();
./src/org/red5/server/stream/PlayEngine.java:			recordedMsg.setBody(recorded);
./src/org/red5/server/stream/PlayEngine.java:			doPushMessage(recordedMsg);
./src/org/red5/server/stream/ServerStream.java:	 * Pipe for recording
./src/org/red5/server/stream/ServerStream.java:	private IPipe recordPipe;
./src/org/red5/server/stream/ServerStream.java:	 * The filename we are recording to.
./src/org/red5/server/stream/ServerStream.java:	protected String recordingFilename;
./src/org/red5/server/stream/ServerStream.java:					// When "live" or "record" is used,
./src/org/red5/server/stream/ServerStream.java:					// any previously recorded stream with the same stream URI is deleted.
./src/org/red5/server/stream/ServerStream.java:					// If a recorded stream at the same URI does not already exist,
./src/org/red5/server/stream/ServerStream.java:					// "append" creates the stream as though "record" was passed.
./src/org/red5/server/stream/ServerStream.java:				paramMap.put("mode", "record");
./src/org/red5/server/stream/ServerStream.java:			if (null == recordPipe) {
./src/org/red5/server/stream/ServerStream.java:				recordPipe = new InMemoryPushPushPipe();
./src/org/red5/server/stream/ServerStream.java:			recordPipe.subscribe(fc, paramMap);
./src/org/red5/server/stream/ServerStream.java:			recordingFilename = filename;
./src/org/red5/server/stream/ServerStream.java:		return recordingFilename;
./src/org/red5/server/stream/ServerStream.java:		Map<Object, Object> recordParamMap = new HashMap<Object, Object>();
./src/org/red5/server/stream/ServerStream.java:		recordPipe = new InMemoryPushPushPipe();
./src/org/red5/server/stream/ServerStream.java:		recordParamMap.put("record", null);
./src/org/red5/server/stream/ServerStream.java:		recordPipe.subscribe((IProvider) this, recordParamMap);
./src/org/red5/server/stream/ServerStream.java:		recordingFilename = null;
./src/org/red5/server/stream/ServerStream.java:		recordPipe.unsubscribe((IProvider) this);
./src/org/red5/server/stream/ServerStream.java:						&& (event.getParamMap() == null || !event.getParamMap().containsKey("record"))) {
./src/org/red5/server/stream/ServerStream.java:		recordPipe.pushMessage(message);
./src/org/red5/server/stream/ServerStream.java:			if (recordingFilename != null) {
./src/org/red5/server/stream/ClientBroadcastStreamMBean.java: * recording mode for live streams, that is, broadcasted stream has broadcast mode. It can be either
./src/org/red5/server/stream/ClientBroadcastStreamMBean.java: * "live" or "record" and latter causes server-side application to record broadcasted stream.
./src/org/red5/server/stream/ClientBroadcastStreamMBean.java: * Note that recorded streams are recorded as FLV files. The same is correct for audio, because
./src/org/red5/server/stream/ClientBroadcastStreamMBean.java: * This type of stream uses two different pipes for live streaming and recording.
./src/org/red5/server/stream/ClientBroadcastStream.java: * recording mode for live streams, that is, broadcasted stream has broadcast mode. It can be either
./src/org/red5/server/stream/ClientBroadcastStream.java: * "live" or "record" and latter causes server-side application to record broadcasted stream.
./src/org/red5/server/stream/ClientBroadcastStream.java: * Note that recorded streams are recorded as FLV files. The same is correct for audio, because
./src/org/red5/server/stream/ClientBroadcastStream.java: * This type of stream uses two different pipes for live streaming and recording.
./src/org/red5/server/stream/ClientBroadcastStream.java:	 * Whether we are recording or not
./src/org/red5/server/stream/ClientBroadcastStream.java:	private volatile boolean recording;
./src/org/red5/server/stream/ClientBroadcastStream.java:	 * FileConsumer used to output recording to disk
./src/org/red5/server/stream/ClientBroadcastStream.java:	private FileConsumer recordingFile;
./src/org/red5/server/stream/ClientBroadcastStream.java:	 * The filename we are recording to.
./src/org/red5/server/stream/ClientBroadcastStream.java:	private String recordingFilename;
./src/org/red5/server/stream/ClientBroadcastStream.java:	 * Pipe for recording
./src/org/red5/server/stream/ClientBroadcastStream.java:	private IPipe recordPipe;
./src/org/red5/server/stream/ClientBroadcastStream.java:		if (recordPipe != null) {
./src/org/red5/server/stream/ClientBroadcastStream.java:			recordPipe.unsubscribe((IProvider) this);
./src/org/red5/server/stream/ClientBroadcastStream.java:			if (recordPipe instanceof AbstractPipe) {
./src/org/red5/server/stream/ClientBroadcastStream.java:				((AbstractPipe) recordPipe).close();
./src/org/red5/server/stream/ClientBroadcastStream.java:		if (recording) {
./src/org/red5/server/stream/ClientBroadcastStream.java:			if (recordPipe != null) {
./src/org/red5/server/stream/ClientBroadcastStream.java:				recordPipe.pushMessage(msg);
./src/org/red5/server/stream/ClientBroadcastStream.java:		return recordingFilename;
./src/org/red5/server/stream/ClientBroadcastStream.java:						&& (event.getParamMap() == null || !event.getParamMap().containsKey("record"))) {
./src/org/red5/server/stream/ClientBroadcastStream.java:		recordingFilename = generator.generateFilename(scope, name, ".flv", GenerationType.RECORD);
./src/org/red5/server/stream/ClientBroadcastStream.java:			file = new File(recordingFilename);
./src/org/red5/server/stream/ClientBroadcastStream.java:			file = scope.getContext().getResource(recordingFilename).getFile();
./src/org/red5/server/stream/ClientBroadcastStream.java:				// When "live" or "record" is used,
./src/org/red5/server/stream/ClientBroadcastStream.java:				// any previously recorded stream with the same stream URI is deleted.
./src/org/red5/server/stream/ClientBroadcastStream.java:				// If a recorded stream at the same URI does not already exist,
./src/org/red5/server/stream/ClientBroadcastStream.java:				// "append" creates the stream as though "record" was passed.
./src/org/red5/server/stream/ClientBroadcastStream.java:		recordingFile = new FileConsumer(scope, file);
./src/org/red5/server/stream/ClientBroadcastStream.java:			paramMap.put("mode", "record");
./src/org/red5/server/stream/ClientBroadcastStream.java:		//mark as "recording" only if we get subscribed
./src/org/red5/server/stream/ClientBroadcastStream.java:		recording = recordPipe.subscribe(recordingFile, paramMap);
./src/org/red5/server/stream/ClientBroadcastStream.java:	 *  Sends record failed notifications
./src/org/red5/server/stream/ClientBroadcastStream.java:	 *  Sends record start notifications
./src/org/red5/server/stream/ClientBroadcastStream.java:		Status recordStatus = new Status(StatusCodes.NS_RECORD_START);
./src/org/red5/server/stream/ClientBroadcastStream.java:		recordStatus.setClientid(getStreamId());
./src/org/red5/server/stream/ClientBroadcastStream.java:		recordStatus.setDetails(getPublishedName());
./src/org/red5/server/stream/ClientBroadcastStream.java:		startMsg.setBody(recordStatus);
./src/org/red5/server/stream/ClientBroadcastStream.java:	 *  Sends record stop notifications
./src/org/red5/server/stream/ClientBroadcastStream.java:			// Notify handler that stream starts recording/publishing
./src/org/red5/server/stream/ClientBroadcastStream.java:						if (recording) {
./src/org/red5/server/stream/ClientBroadcastStream.java:			if (recording) {
./src/org/red5/server/stream/ClientBroadcastStream.java:		recordPipe = new InMemoryPushPushPipe();
./src/org/red5/server/stream/ClientBroadcastStream.java:		Map<Object, Object> recordParamMap = new HashMap<Object, Object>();
./src/org/red5/server/stream/ClientBroadcastStream.java:		// Clear record flag
./src/org/red5/server/stream/ClientBroadcastStream.java:		recordParamMap.put("record", null);
./src/org/red5/server/stream/ClientBroadcastStream.java:		recordPipe.subscribe((IProvider) this, recordParamMap);
./src/org/red5/server/stream/ClientBroadcastStream.java:		recording = false;
./src/org/red5/server/stream/ClientBroadcastStream.java:		recordingFilename = null;
./src/org/red5/server/stream/ClientBroadcastStream.java:	 * Stops any currently active recordings.
./src/org/red5/server/stream/ClientBroadcastStream.java:		if (recording) {
./src/org/red5/server/stream/ClientBroadcastStream.java:			recording = false;
./src/org/red5/server/stream/ClientBroadcastStream.java:			recordingFilename = null;
./src/org/red5/server/stream/ClientBroadcastStream.java:			recordPipe.unsubscribe(recordingFile);
./src/org/red5/server/stream/ClientBroadcastStream.java:		return recording;
./src/org/red5/server/stream/ClientBroadcastStream.java:					log.debug("we have decoder record to send");
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStreamMBean.java.svn-base: * recording mode for live streams, that is, broadcasted stream has broadcast mode. It can be either
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStreamMBean.java.svn-base: * "live" or "record" and latter causes server-side application to record broadcasted stream.
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStreamMBean.java.svn-base: * Note that recorded streams are recorded as FLV files. The same is correct for audio, because
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStreamMBean.java.svn-base: * This type of stream uses two different pipes for live streaming and recording.
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:	 * Pipe for recording
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:	private IPipe recordPipe;
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:	 * The filename we are recording to.
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:	protected String recordingFilename;
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:					// When "live" or "record" is used,
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:					// any previously recorded stream with the same stream URI is deleted.
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:					// If a recorded stream at the same URI does not already exist,
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:					// "append" creates the stream as though "record" was passed.
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:				paramMap.put("mode", "record");
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:			if (null == recordPipe) {
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:				recordPipe = new InMemoryPushPushPipe();
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:			recordPipe.subscribe(fc, paramMap);
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:			recordingFilename = filename;
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:		return recordingFilename;
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:		Map<Object, Object> recordParamMap = new HashMap<Object, Object>();
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:		recordPipe = new InMemoryPushPushPipe();
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:		recordParamMap.put("record", null);
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:		recordPipe.subscribe((IProvider) this, recordParamMap);
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:		recordingFilename = null;
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:		recordPipe.unsubscribe((IProvider) this);
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:						&& (event.getParamMap() == null || !event.getParamMap().containsKey("record"))) {
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:		recordPipe.pushMessage(message);
./src/org/red5/server/stream/.svn/text-base/ServerStream.java.svn-base:			if (recordingFilename != null) {
./src/org/red5/server/stream/.svn/text-base/StreamingProxy.java.svn-base:	public static final String RECORD = "record";
./src/org/red5/server/stream/.svn/text-base/PlayEngine.java.svn-base:		// The default value is -2, which looks for a live stream, then a recorded stream, 
./src/org/red5/server/stream/.svn/text-base/PlayEngine.java.svn-base:		// If 0 or a positive number, plays a recorded stream, beginning start seconds in.
./src/org/red5/server/stream/.svn/text-base/PlayEngine.java.svn-base:		// -2: live then recorded, -1: live, >=0: recorded
./src/org/red5/server/stream/.svn/text-base/PlayEngine.java.svn-base:			Ping recorded = new Ping();
./src/org/red5/server/stream/.svn/text-base/PlayEngine.java.svn-base:			recorded.setEventType(Ping.RECORDED_STREAM);
./src/org/red5/server/stream/.svn/text-base/PlayEngine.java.svn-base:			recorded.setValue2(streamId);
./src/org/red5/server/stream/.svn/text-base/PlayEngine.java.svn-base:			RTMPMessage recordedMsg = new RTMPMessage();
./src/org/red5/server/stream/.svn/text-base/PlayEngine.java.svn-base:			recordedMsg.setBody(recorded);
./src/org/red5/server/stream/.svn/text-base/PlayEngine.java.svn-base:			doPushMessage(recordedMsg);
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base: * recording mode for live streams, that is, broadcasted stream has broadcast mode. It can be either
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base: * "live" or "record" and latter causes server-side application to record broadcasted stream.
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base: * Note that recorded streams are recorded as FLV files. The same is correct for audio, because
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base: * This type of stream uses two different pipes for live streaming and recording.
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:	 * Whether we are recording or not
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:	private volatile boolean recording;
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:	 * FileConsumer used to output recording to disk
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:	private FileConsumer recordingFile;
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:	 * The filename we are recording to.
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:	private String recordingFilename;
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:	 * Pipe for recording
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:	private IPipe recordPipe;
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		if (recordPipe != null) {
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:			recordPipe.unsubscribe((IProvider) this);
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:			if (recordPipe instanceof AbstractPipe) {
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:				((AbstractPipe) recordPipe).close();
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		if (recording) {
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:			if (recordPipe != null) {
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:				recordPipe.pushMessage(msg);
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		return recordingFilename;
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:						&& (event.getParamMap() == null || !event.getParamMap().containsKey("record"))) {
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		recordingFilename = generator.generateFilename(scope, name, ".flv", GenerationType.RECORD);
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:			file = new File(recordingFilename);
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:			file = scope.getContext().getResource(recordingFilename).getFile();
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:				// When "live" or "record" is used,
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:				// any previously recorded stream with the same stream URI is deleted.
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:				// If a recorded stream at the same URI does not already exist,
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:				// "append" creates the stream as though "record" was passed.
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		recordingFile = new FileConsumer(scope, file);
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:			paramMap.put("mode", "record");
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		//mark as "recording" only if we get subscribed
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		recording = recordPipe.subscribe(recordingFile, paramMap);
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:	 *  Sends record failed notifications
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:	 *  Sends record start notifications
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		Status recordStatus = new Status(StatusCodes.NS_RECORD_START);
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		recordStatus.setClientid(getStreamId());
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		recordStatus.setDetails(getPublishedName());
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		startMsg.setBody(recordStatus);
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:	 *  Sends record stop notifications
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:			// Notify handler that stream starts recording/publishing
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:						if (recording) {
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:			if (recording) {
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		recordPipe = new InMemoryPushPushPipe();
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		Map<Object, Object> recordParamMap = new HashMap<Object, Object>();
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		// Clear record flag
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		recordParamMap.put("record", null);
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		recordPipe.subscribe((IProvider) this, recordParamMap);
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		recording = false;
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		recordingFilename = null;
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:	 * Stops any currently active recordings.
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		if (recording) {
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:			recording = false;
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:			recordingFilename = null;
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:			recordPipe.unsubscribe(recordingFile);
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:		return recording;
./src/org/red5/server/stream/.svn/text-base/ClientBroadcastStream.java.svn-base:					log.debug("we have decoder record to send");
./src/org/red5/server/stream/consumer/FileConsumer.java: * Consumer that pushes messages to file. Used when recording live streams.
./src/org/red5/server/stream/consumer/.svn/text-base/FileConsumer.java.svn-base: * Consumer that pushes messages to file. Used when recording live streams.
./src/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.java.svn-base:     * A recorded stream was deleted successfully.
./src/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.java.svn-base:     * A recorded stream failed to delete.
./src/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.java.svn-base:     * An attempt was made to record a read-only stream
./src/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.java.svn-base:     * An attempt to record a stream failed
./src/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.java.svn-base:     * The subscriber has used the seek command to move to a particular location in the recorded stream.
./src/org/red5/server/net/rtmp/status/.svn/text-base/StatusCodes.java.svn-base:     * The subscriber has used the seek command to move to a particular location in the recorded stream.
./src/org/red5/server/net/rtmp/status/StatusCodes.java:     * A recorded stream was deleted successfully.
./src/org/red5/server/net/rtmp/status/StatusCodes.java:     * A recorded stream failed to delete.
./src/org/red5/server/net/rtmp/status/StatusCodes.java:     * An attempt was made to record a read-only stream
./src/org/red5/server/net/rtmp/status/StatusCodes.java:     * An attempt to record a stream failed
./src/org/red5/server/net/rtmp/status/StatusCodes.java:     * The subscriber has used the seek command to move to a particular location in the recorded stream.
./src/org/red5/server/net/rtmp/status/StatusCodes.java:     * The subscriber has used the seek command to move to a particular location in the recorded stream.
./src/org/red5/server/net/rtmp/event/Ping.java:	 * Recorded stream. Sent by server to indicate a recorded stream.
./src/org/red5/server/net/rtmp/event/.svn/text-base/Ping.java.svn-base:	 * Recorded stream. Sent by server to indicate a recorded stream.
./src/org/red5/io/amf/.svn/text-base/Output.java.svn-base:    public void writeRecordSet(RecordSet recordset, Serializer serializer) {
./src/org/red5/io/amf/.svn/text-base/Output.java.svn-base:		if (checkWriteReference(recordset)) {
./src/org/red5/io/amf/.svn/text-base/Output.java.svn-base:		storeReference(recordset);
./src/org/red5/io/amf/.svn/text-base/Output.java.svn-base:        Map<String, Object> info = recordset.serialize();
./src/org/red5/io/amf/Output.java:    public void writeRecordSet(RecordSet recordset, Serializer serializer) {
./src/org/red5/io/amf/Output.java:		if (checkWriteReference(recordset)) {
./src/org/red5/io/amf/Output.java:		storeReference(recordset);
./src/org/red5/io/amf/Output.java:        Map<String, Object> info = recordset.serialize();
./src/org/red5/io/utils/RandomGUID.java: * records by guessing or simply by incrementing sequential numbers.
./src/org/red5/io/utils/.svn/text-base/RandomGUID.java.svn-base: * records by guessing or simply by incrementing sequential numbers.
./src/org/red5/io/object/RecordSetPage.java: * @see <a href="http://www.osflash.org/amf/recordset">osflash.org documentation</a>
./src/org/red5/io/object/RecordSetPage.java:     * Creates recordset page from Input object
./src/org/red5/io/object/RecordSetPage.java:     * Getter for recordset cursor
./src/org/red5/io/object/RecordSet.java: * @see <a href="http://www.osflash.org/amf/recordset">osflash.org documentation</a>
./src/org/red5/io/object/RecordSet.java:     * Creates recordset from Input object
./src/org/red5/io/object/RecordSet.java:	 * Return a list containing the names of the columns in the recordset.
./src/org/red5/io/object/RecordSet.java:	 * Return a specified item from the recordset.  If the item is not
./src/org/red5/io/object/RecordSet.java:     * @return              Item from recordset
./src/org/red5/io/object/.svn/text-base/Output.java.svn-base:     * Write recordset.
./src/org/red5/io/object/.svn/text-base/Output.java.svn-base:     * @param recordset		Recordset to write.
./src/org/red5/io/object/.svn/text-base/Output.java.svn-base:    void writeRecordSet(RecordSet recordset, Serializer serializer);
./src/org/red5/io/object/.svn/text-base/RecordSet.java.svn-base: * @see <a href="http://www.osflash.org/amf/recordset">osflash.org documentation</a>
./src/org/red5/io/object/.svn/text-base/RecordSet.java.svn-base:     * Creates recordset from Input object
./src/org/red5/io/object/.svn/text-base/RecordSet.java.svn-base:	 * Return a list containing the names of the columns in the recordset.
./src/org/red5/io/object/.svn/text-base/RecordSet.java.svn-base:	 * Return a specified item from the recordset.  If the item is not
./src/org/red5/io/object/.svn/text-base/RecordSet.java.svn-base:     * @return              Item from recordset
./src/org/red5/io/object/.svn/text-base/RecordSetPage.java.svn-base: * @see <a href="http://www.osflash.org/amf/recordset">osflash.org documentation</a>
./src/org/red5/io/object/.svn/text-base/RecordSetPage.java.svn-base:     * Creates recordset page from Input object
./src/org/red5/io/object/.svn/text-base/RecordSetPage.java.svn-base:     * Getter for recordset cursor
./src/org/red5/io/object/Output.java:     * Write recordset.
./src/org/red5/io/object/Output.java:     * @param recordset		Recordset to write.
./src/org/red5/io/object/Output.java:    void writeRecordSet(RecordSet recordset, Serializer serializer);
./src/org/red5/io/mock/.svn/text-base/Output.java.svn-base:	public void writeRecordSet(RecordSet recordset, Serializer serializer) {
./src/org/red5/io/mock/.svn/text-base/Output.java.svn-base:		list.add(recordset);
./src/org/red5/io/mock/Output.java:	public void writeRecordSet(RecordSet recordset, Serializer serializer) {
./src/org/red5/io/mock/Output.java:		list.add(recordset);
./src/org/red5/io/flv/impl/FLVWriter.java:     * @param videoCodecId		Id of the video codec used while recording.
./src/org/red5/io/flv/impl/FLVWriter.java:     * @param audioCodecId		Id of the audio codec used while recording.
./src/org/red5/io/flv/impl/.svn/text-base/FLVWriter.java.svn-base:     * @param videoCodecId		Id of the video codec used while recording.
./src/org/red5/io/flv/impl/.svn/text-base/FLVWriter.java.svn-base:     * @param audioCodecId		Id of the audio codec used while recording.
./src/org/red5/io/mp4/MP4Atom.java:	protected Vector<Record> records = new Vector<Record>();
./src/org/red5/io/mp4/MP4Atom.java:		return records;
./src/org/red5/io/mp4/MP4Atom.java:			records.addElement(new Record(firstChunk, samplesPerChunk, sampleDescriptionIndex));
./src/org/red5/io/mp4/impl/MP4Reader.java:    												Vector<MP4Atom.TimeSampleRecord> records = stts.getTimeToSamplesRecords();
./src/org/red5/io/mp4/impl/MP4Reader.java:    												log.debug("Record count: {}", records.size());
./src/org/red5/io/mp4/impl/MP4Reader.java:    												MP4Atom.TimeSampleRecord rec = records.firstElement();
./src/org/red5/io/mp4/impl/MP4Reader.java:    												//if we have 1 record then all samples have the same duration
./src/org/red5/io/mp4/impl/MP4Reader.java:    												if (records.size() > 1) {
./src/org/red5/io/mp4/impl/MP4Reader.java:    												Vector<MP4Atom.TimeSampleRecord> records = stts.getTimeToSamplesRecords();
./src/org/red5/io/mp4/impl/MP4Reader.java:    												log.debug("Record count: {}", records.size());
./src/org/red5/io/mp4/impl/MP4Reader.java:    												MP4Atom.TimeSampleRecord rec = records.firstElement();
./src/org/red5/io/mp4/impl/MP4Reader.java:    												//if we have 1 record then all samples have the same duration
./src/org/red5/io/mp4/impl/MP4Reader.java:    												if (records.size() > 1) {
./src/org/red5/io/mp4/impl/MP4Reader.java:			MP4Atom.Record record = videoSamplesToChunks.get(i);
./src/org/red5/io/mp4/impl/MP4Reader.java:			int firstChunk = record.getFirstChunk();
./src/org/red5/io/mp4/impl/MP4Reader.java:				int sampleCount = record.getSamplesPerChunk();
./src/org/red5/io/mp4/impl/MP4Reader.java:			MP4Atom.Record record = audioSamplesToChunks.get(i);
./src/org/red5/io/mp4/impl/MP4Reader.java:			int firstChunk = record.getFirstChunk();
./src/org/red5/io/mp4/impl/MP4Reader.java:				int sampleCount = record.getSamplesPerChunk();
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:    												Vector<MP4Atom.TimeSampleRecord> records = stts.getTimeToSamplesRecords();
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:    												log.debug("Record count: {}", records.size());
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:    												MP4Atom.TimeSampleRecord rec = records.firstElement();
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:    												//if we have 1 record then all samples have the same duration
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:    												if (records.size() > 1) {
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:    												Vector<MP4Atom.TimeSampleRecord> records = stts.getTimeToSamplesRecords();
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:    												log.debug("Record count: {}", records.size());
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:    												MP4Atom.TimeSampleRecord rec = records.firstElement();
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:    												//if we have 1 record then all samples have the same duration
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:    												if (records.size() > 1) {
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:			MP4Atom.Record record = videoSamplesToChunks.get(i);
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:			int firstChunk = record.getFirstChunk();
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:				int sampleCount = record.getSamplesPerChunk();
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:			MP4Atom.Record record = audioSamplesToChunks.get(i);
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:			int firstChunk = record.getFirstChunk();
./src/org/red5/io/mp4/impl/.svn/text-base/MP4Reader.java.svn-base:				int sampleCount = record.getSamplesPerChunk();
./src/org/red5/io/mp4/.svn/text-base/MP4Atom.java.svn-base:	protected Vector<Record> records = new Vector<Record>();
./src/org/red5/io/mp4/.svn/text-base/MP4Atom.java.svn-base:		return records;
./src/org/red5/io/mp4/.svn/text-base/MP4Atom.java.svn-base:			records.addElement(new Record(firstChunk, samplesPerChunk, sampleDescriptionIndex));
./src/org/red5/io/amf3/.svn/text-base/Output.java.svn-base:    public void writeRecordSet(RecordSet recordset, Serializer serializer) {
./src/org/red5/io/amf3/Output.java:    public void writeRecordSet(RecordSet recordset, Serializer serializer) {
./src/org/red5/io/m4a/impl/M4AReader.java:												Vector<MP4Atom.TimeSampleRecord> records = stts.getTimeToSamplesRecords();
./src/org/red5/io/m4a/impl/M4AReader.java:												log.debug("Record count: {}", records.size());
./src/org/red5/io/m4a/impl/M4AReader.java:												MP4Atom.TimeSampleRecord rec = records.firstElement();
./src/org/red5/io/m4a/impl/M4AReader.java:												//if we have 1 record then all samples have the same duration
./src/org/red5/io/m4a/impl/M4AReader.java:												if (records.size() > 1) {
./src/org/red5/io/m4a/impl/M4AReader.java:			MP4Atom.Record record = audioSamplesToChunks.get(i);
./src/org/red5/io/m4a/impl/M4AReader.java:			int firstChunk = record.getFirstChunk();
./src/org/red5/io/m4a/impl/M4AReader.java:				int sampleCount = record.getSamplesPerChunk();
./src/org/red5/io/m4a/impl/.svn/text-base/M4AReader.java.svn-base:												Vector<MP4Atom.TimeSampleRecord> records = stts.getTimeToSamplesRecords();
./src/org/red5/io/m4a/impl/.svn/text-base/M4AReader.java.svn-base:												log.debug("Record count: {}", records.size());
./src/org/red5/io/m4a/impl/.svn/text-base/M4AReader.java.svn-base:												MP4Atom.TimeSampleRecord rec = records.firstElement();
./src/org/red5/io/m4a/impl/.svn/text-base/M4AReader.java.svn-base:												//if we have 1 record then all samples have the same duration
./src/org/red5/io/m4a/impl/.svn/text-base/M4AReader.java.svn-base:												if (records.size() > 1) {
./src/org/red5/io/m4a/impl/.svn/text-base/M4AReader.java.svn-base:			MP4Atom.Record record = audioSamplesToChunks.get(i);
./src/org/red5/io/m4a/impl/.svn/text-base/M4AReader.java.svn-base:			int firstChunk = record.getFirstChunk();
./src/org/red5/io/m4a/impl/.svn/text-base/M4AReader.java.svn-base:				int sampleCount = record.getSamplesPerChunk();
./test/org/red5/server/stream/.svn/text-base/PlaylistSubscriberStreamTest.xml.svn-base:	    <property name="recordPath" value="/webapps/oflaDemo/streams"/>
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:	 * The filename we are recording to.
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:	private String recordingFilename;
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:	 * Pipe for recording
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:	private IPipe recordPipe;
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:		recordPipe.unsubscribe((IProvider) this);
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:		return recordingFilename;
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:								.containsKey("record"))) {
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:		recordPipe.pushMessage(message);
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:					// When "live" or "record" is used,
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:					// any previously recorded stream with the same stream
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:					// If a recorded stream at the same URI does not already
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:					// "append" creates the stream as though "record" was
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:				paramMap.put("mode", "record");
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:			if (null == recordPipe) {
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:				recordPipe = new InMemoryPushPushPipe();
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:			recordPipe.subscribe(fc, paramMap);
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:			recordingFilename = filename;
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:		Map<Object, Object> recordParamMap = new HashMap<Object, Object>();
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:		recordPipe = new InMemoryPushPushPipe();
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:		recordParamMap.put("record", null);
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:		recordPipe.subscribe((IProvider) this, recordParamMap);
./test/org/red5/server/stream/.svn/text-base/NoSyncServerStream.java.svn-base:		recordingFilename = null;
./test/org/red5/server/stream/PlaylistSubscriberStreamTest.xml:	    <property name="recordPath" value="/webapps/oflaDemo/streams"/>
./test/org/red5/server/stream/NoSyncServerStream.java:	 * The filename we are recording to.
./test/org/red5/server/stream/NoSyncServerStream.java:	private String recordingFilename;
./test/org/red5/server/stream/NoSyncServerStream.java:	 * Pipe for recording
./test/org/red5/server/stream/NoSyncServerStream.java:	private IPipe recordPipe;
./test/org/red5/server/stream/NoSyncServerStream.java:		recordPipe.unsubscribe((IProvider) this);
./test/org/red5/server/stream/NoSyncServerStream.java:		return recordingFilename;
./test/org/red5/server/stream/NoSyncServerStream.java:								.containsKey("record"))) {
./test/org/red5/server/stream/NoSyncServerStream.java:		recordPipe.pushMessage(message);
./test/org/red5/server/stream/NoSyncServerStream.java:					// When "live" or "record" is used,
./test/org/red5/server/stream/NoSyncServerStream.java:					// any previously recorded stream with the same stream
./test/org/red5/server/stream/NoSyncServerStream.java:					// If a recorded stream at the same URI does not already
./test/org/red5/server/stream/NoSyncServerStream.java:					// "append" creates the stream as though "record" was
./test/org/red5/server/stream/NoSyncServerStream.java:				paramMap.put("mode", "record");
./test/org/red5/server/stream/NoSyncServerStream.java:			if (null == recordPipe) {
./test/org/red5/server/stream/NoSyncServerStream.java:				recordPipe = new InMemoryPushPushPipe();
./test/org/red5/server/stream/NoSyncServerStream.java:			recordPipe.subscribe(fc, paramMap);
./test/org/red5/server/stream/NoSyncServerStream.java:			recordingFilename = filename;
./test/org/red5/server/stream/NoSyncServerStream.java:		Map<Object, Object> recordParamMap = new HashMap<Object, Object>();
./test/org/red5/server/stream/NoSyncServerStream.java:		recordPipe = new InMemoryPushPushPipe();
./test/org/red5/server/stream/NoSyncServerStream.java:		recordParamMap.put("record", null);
./test/org/red5/server/stream/NoSyncServerStream.java:		recordPipe.subscribe((IProvider) this, recordParamMap);
./test/org/red5/server/stream/NoSyncServerStream.java:		recordingFilename = null;
./test/org/red5/server/FilenameGenerator.java: * Provides custom playback and recording directories.
./test/org/red5/server/FilenameGenerator.java:    // Path that will store recorded videos
./test/org/red5/server/FilenameGenerator.java:    public static String recordPath = "/";
./test/org/red5/server/FilenameGenerator.java:			filename.append(recordPath);
./test/org/red5/server/FilenameGenerator.java:    	logger.debug("Set record path: {}", path); 
./test/org/red5/server/FilenameGenerator.java:        recordPath = path;
./test/org/red5/server/.svn/text-base/FilenameGenerator.java.svn-base: * Provides custom playback and recording directories.
./test/org/red5/server/.svn/text-base/FilenameGenerator.java.svn-base:    // Path that will store recorded videos
./test/org/red5/server/.svn/text-base/FilenameGenerator.java.svn-base:    public static String recordPath = "/";
./test/org/red5/server/.svn/text-base/FilenameGenerator.java.svn-base:			filename.append(recordPath);
./test/org/red5/server/.svn/text-base/FilenameGenerator.java.svn-base:    	logger.debug("Set record path: {}", path); 
./test/org/red5/server/.svn/text-base/FilenameGenerator.java.svn-base:        recordPath = path;
./webapps/root/demos/index.html:Publishing program that can be used to publish, record and view videos.
./webapps/root/demos/index.html:Basic live video recorder.  Once you've stopped a recording, check out <code>$RED5_HOME/webapps/oflaDemo/streams</code> for your recorded FLV file.
./webapps/root/demos/.svn/text-base/index.html.svn-base:Publishing program that can be used to publish, record and view videos.
./webapps/root/demos/.svn/text-base/index.html.svn-base:Basic live video recorder.  Once you've stopped a recording, check out <code>$RED5_HOME/webapps/oflaDemo/streams</code> for your recorded FLV file.
