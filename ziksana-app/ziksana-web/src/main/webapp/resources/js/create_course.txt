//Author: Arun Prasad. R
var course_tree_data; 
var treeCount = 1; //temporary node id
var tabInfo = new Object();
tabInfo.id ="tabset-1";
$(function(){

	//Initialize fancy box for 
	$("a.lbx-70-50").fancybox({
			'width'				: 700,
			'height'			: 500,
			'autoScale'			: false,
			'transitionIn'		: 'elastic',
			'transitionOut'		: 'elastic',
			'type'				: 'iframe'
	});	

	$('#treedetails_fancybox_trigger').fancybox({
			'width'				: 700,
			'height'			: 500,
			'autoScale'			: false,
			'transitionIn'		: 'elastic',
			'transitionOut'		: 'elastic',
			'type'				: 'iframe'
	});	
	
	//initialize social tabs
	$('#socializemaintabs').tabs();
	
	
}); //End of Doc Ready.




//FUNCTIONS
function prepareTree(tab_id){
		
		var tree_data = jQuery.jstree._reference($("#course_tree")).get_json();

		if ($('#'+tab_id).find('#course_tree_'+tab_id).length > 0) {
			//a tree container exists
			
			 
		} else {
			tree_container_html = '<div id="course_tree_'+tab_id+'" class="tree_container" style="display: table-cell; vertical-align: top; width: 200px;"></div>';
			$('#'+tab_id).prepend(tree_container_html)
		}

		tree_container = $('#'+tab_id).find("#course_tree_"+tab_id);

		tabInfo.id = tab_id;
		createProgramTreeForTabset(tree_data, tree_container);
		
		if(tab_id == 'tabset-2'){
			tree_container.bind("select_node.jstree", function (event, data) {
		            // `data.rslt.obj` is the jquery extended node that was clicked  
					//$(data.rslt.obj).delay(100).dblclick();
		    });
			
		}
		
		
		//if tab_id = tabset-4 (Assignments/Tests), bind a click event to nodes to open a page on right
			if(tab_id == 'tabset-4'){
								
				tree_container.bind("select_node.jstree", function (event, data) {
		            // `data.rslt.obj` is the jquery extended node that was clicked  
					node = data.rslt.obj;
					node.click(function(){
						
						console.log(node.attr('id'));
							screen_content = '<div id="screencontent" style="background: #eee; padding: 1em;"><p style="font-size:16px;">Assignment</p><br><br/><table cellspacing="5" cellpadding="5"><tbody><tr><td>Assignment Name: </td><td><input id="assignmentname" type="text" disabled="disabled" value="Ziksana" name=""></td> </tr><tr><td>Assignment description:</td><td><input type="text" disabled="disabled" value="Ziksana Project" name=""></td></tr></tbody></table><br/><table cellspacing="5" cellpadding="5"><tbody><tr><td>Associated Tests: </td><td><select id="associatedtest" name=""></td> </tr><tr><td>Assignment description:</td><br/><td><label value="" id="test-descrip"></label></td></tr></tbody></table><p><br/><a href="library/Addtest(Define Assignment).html" style="padding-right:10px;" class="lbx-70-50"><input type="button"  value="Add Test"></a><a href="#" class="lbx-80-50 txt-size-11"><input type="button" value="Save and Continue"></a></p></div>';
						//$('.assignments_contaienr').load('../library/defineassignmentscreen.html','#screen1');
						$('.assignments_container').html(screen_content);
						initializeFancyBox('a.lbx-70-50');
						var txt1=node.attr('id');
						
						var txt2=($('#'+txt1).text());
						$('#assignmentname').val(txt2);
						document.getElementById('nodeHid').value=txt1;
						
										
						
					});
					
		        });
				
						
				$('#tabset-4 .tree_container ul > li span').each(function(){

					$(this).click(function(){
						node = $(this);
						console.log(node.attr('id'));
						
						screen_content = '<div id="screencontent" style="background: #eee; padding: 1em;"><p>Assignment</p><br><br/><table cellspacing="5" cellpadding="5"><tbody><tr><td>Assignment Name: </td><td><input id="assignmentname" type="text" disabled="disabled" value="Ziksana" name=""></td> </tr><tr><td>Assignment description:</td><td><input type="text" disabled="disabled" value="Ziksana Project" name=""></td></tr></tbody></table><p><a href="library/addtest.html" style="padding-right:10px;" class="lbx-70-50">Add Test</a><a href="#" style="padding-right:10px;" class="lbx-80-50 txt-size-11">Save and Continue</a></p></div>';
						//$('.assignments_contaienr').load('../library/defineassignmentscreen.html','#screen1');
						$('.assignments_container').html(screen_content);
						initializeFancyBox('a.lbx-70-50');
						$('#assignmentname').val(node.attr('id'));
					});
				});
				
			}
		
		
			
			
	
}//preparetree

function validChild()
{
	var items;
	items = ["default", "folder", "module", "section","assessment", "prerequisite", "corequisite", "learningobject", "chapter", "lesson","image","video","pdf","content","web"];
	return items;
}


function createProgramTreeForTabset(tree_json_object, tree_container){
		//tree_json_object = jQuery.jstree._reference($("#course_tree")).get_json();
		tree_json_object = $("#course_tree").jstree("get_json", -1);
		tree_json_object_string = JSON.stringify(tree_json_object);
		console.log(tree_json_object_string);		
		tree_container.jstree({
			//"json_data":tree_json_object,
			"json_data": { "data" : eval(tree_json_object) },
			"themes":{
				"theme":"default",
				"dots":true,
				"icons":true
			},
			"ui" : {
				"select_limit" : 1
			},
			"plugins" : [ "themes", "json_data", "ui", "crrm", "contextmenu", "types" ] ,
			"contextmenu" : {'items' : customMenu },

			////
			// Using types - most of the time this is an overkill
			    // read the docs carefully to decide whether you need types
			    "types" : {
			        // I set both options to -2, as I do not need depth and children count checking
			        // Those two checks may slow jstree a lot, so use only when needed
			        "max_depth" : -2,
			        "max_children" : -2,
			        // I want only `course` nodes to be root nodes
			        // This will prevent moving or creating any other type as a root node
			        "valid_children" : [ "course" ],
			        "types" : {
						"video": {
							"valid_children" : validChild,
						    "icon" : {
			                    "image" : treetype_icon_url + "/icons/video.png"
			                }						
						},
						"pdf": {
							"valid_children" : validChild,
						    "icon" : {
			                    "image" : treetype_icon_url + "/icons/pdf_icon.png"
			                }						
						},						
						"content": {
							"valid_children" : validChild,
						    "icon" : {
			                    "image" : treetype_icon_url + "/icons/word-icon.png"
			                }						
						},
						"web": {
							"valid_children" : validChild,
						    "icon" : {
			                    "image" : treetype_icon_url + "/icons/url.png"
			                }						
						},
						"image": {
							"valid_children" : validChild,
						    "icon" : {
			                    "image" : treetype_icon_url + "/file.gif"
			                }						
						},
			            // The default type, the most basic one.
			            "learningobject" : {
			                // I want this type to have only learning objects
			                
			                "valid_children" : validChild,
			                "icon" : {
			                    "image" : treetype_icon_url + "/file.gif"
			                }
			            },
			            "lesson" : {
			                "valid_children" : validChild,
			                "icon" : {
			                    "image" : treetype_icon_url + "/lesson.png"
			                }
			            },

			            "section" : {
			                "valid_children" :validChild,
			                "icon" : {
			                    "image" : treetype_icon_url + "/section.png"
			                }
			            },

			            "chapter" : {
			                "valid_children" : validChild,
			                "icon" : {
			                    "image" : treetype_icon_url + "/chapter.png"
			                }
			            },


			            "prerequisite" : {
			                "valid_children" : validChild,
			                "icon" : {
			                    "image" : treetype_icon_url + "/prerequisite.png"
			                }
			            },


			            "corequisite" : {
			                "valid_children" :validChild,
			                "icon" : {
			                    "image" : treetype_icon_url + "/corequisite.png"
			                }
			            },


			            "assessment" : {
			                "valid_children" : validChild,
			                "icon" : {
			                    "image" : treetype_icon_url + "/assessment.png"
			                }
			            },

			            "module" : {
			                "valid_children" :validChild,
			                "icon" : {
			                    "image" : treetype_icon_url + "/module.png"
			                }
			            },

			            // The `folder` type
			            "folder" : {
			                // can have files and other folders inside of it, but NOT `drive` nodes
			               "valid_children" :validChild,
			                "icon" : {
			                    "image" : treetype_icon_url + "/folder-closed.gif"
			                }
			            },
			            // The `course` nodes
			            "course" : {
			                // can have files and folders inside, but NOT other `course` nodes
			                "valid_children" :validChild,
			                "icon" : {
			                    "image" : treetype_icon_url + "/course.png"
			                },
			                // those prevent the functions with the same name to be used on `drive` nodes
			                // internally the `before` event is used
			                "start_drag" : false,
			                "move_node" : false,
			                "delete_node" : false,
			                "remove" : false
			            },						
			        }
			    }

			////

		
		}).bind("loaded.jstree", function (event, data) {
			console.log("TREE LOADED");
		});
	};




function initializeFancyBox(selector){
	$(selector).fancybox({
		'width'				: 700,
		'height'			: 500,
		'autoScale'			: false,
		'transitionIn'		: 'elastic',
		'transitionOut'		: 'elastic',
		'type'				: 'iframe'
	});	
}




//custom Context Menu
function customMenu(node) {
    	
	var items;
	currentNode = node;
	if(tabInfo.id == "tabset-2"){
	items = {
    	create: {
    		label: "Create",
			//action: associate_fancybox(node)
    		action: function(obj) {
				var d = document.getElementById("fancybox-btn");				
				if(d == null)
				{
				var a = document.createElement("a");
				a.setAttribute("href","create_adddescribe.html");
				a.setAttribute("id","fancybox-btn");
				a.setAttribute("class","associate_lbx-80-50");				
				$("#tabset-2").append(a);
				$(".associate_lbx-80-50").fancybox({
					'width'				: 700,
					'height'			: 500,
					'autoScale'			: false,
					'transitionIn'		: 'elastic',
					'transitionOut'		: 'elastic',
					'type'				: 'iframe'
				});	
				a.click(function() {  $(document).ready(function(){$("a#fancybox-btn").fancybox();})});
				}
				$("#fancybox-btn").click();
				console.log($(".associate_lbx-80-50"));
			}
		},	
		renameItem: { // The "rename" menu item
            label: "Rename",
            action: function (obj) { this.rename(obj); }
        },
        deleteItem: { // The "delete" menu item
            label: "Delete",
            action: function (obj) { if(this.is_selected(obj)) { this.remove(); } else { this.remove(obj); } }
        }
	}
	 return items;
	}
	// Continues if Not Tab-2
	// The default set of all items
	
    var items = {
        createItem: { // The "rename" menu item
            label: "Create Component",
            action: function (obj) { collectTreeDetails(obj); /*this function uses the parent obj and a fancy box form to create new node*/ }
        },

        /*
    	create: {
    		label: "Create",
    		action: false,
            submenu:{
                    "create_module" : {
                        "seperator_before" : false,
                        "seperator_after" : false,
                        "label" : "Module",
                        action : function (obj) { collectTreeDetails(obj); }
                    },
                    "create_chapter" : {
                        "seperator_before" : false,
                        "seperator_after" : false,
                        "label" : "Chapter",
                        action : function (obj) { collectTreeDetails(obj); }
                    },

                    "create_section" : {
                        "seperator_before" : false,
                        "seperator_after" : false,
                        "label" : "Section",
                        action : function (obj) { collectTreeDetails(obj); }
                    },

                    "create_lesson" : {
                        "seperator_before" : false,
                        "seperator_after" : false,
                        "label" : "Sub-section/Lesson",
                        action : function (obj) { collectTreeDetails(obj); }
                    },

                    "create_learningobject" : {
                        "seperator_before" : false,
                        "seperator_after" : false,
                        "label" : "Learning Object",
                        action : function (obj) { collectTreeDetails(obj); }
                    },

                    "create_assessment" : {
                        "seperator_before" : false,
                        "seperator_after" : false,
                        "label" : "Assessment",
                        action : function (obj) { collectTreeDetails(obj); }
                    },

                    "create_prerequisite" : {
                        "seperator_before" : false,
                        "seperator_after" : false,
                        "label" : "Prerequisite",
                        action : function (obj) { collectTreeDetails(obj); }
                    },

                    "create_corequisite" : {
                        "seperator_before" : false,
                        "seperator_after" : false,
                        "label" : "Corequisite",
                        action : function (obj) { collectTreeDetails(obj); }
                    }                    

            }

    	},
		*/ //End of Create Submenu code



        renameItem: { // The "rename" menu item
            label: "Rename",
            action: function (obj) { this.rename(obj); }
        },
        deleteItem: { // The "delete" menu item
            label: "Delete",
            action: function (obj) { if(this.is_selected(obj)) { this.remove(); } else { this.remove(obj); } }
        }
    };

    if ($(node).hasClass("folder")) {
        // Delete the "delete" menu item
        delete items.deleteItem;
    }

    return items;
}




//collect node details in fancybox
function collectTreeDetails(obj){

	parent_node_id = $(obj).attr('id');

	anchor = $('#treedetails_fancybox_trigger');
	anchor_href='create_addtree.html?parent_node_id='+parent_node_id;
	anchor.attr('href', anchor_href);
	$('a#treedetails_fancybox_trigger').click();
}

//open treedetails in fancybox
function openNodeDetails(node){
	console.log('about to open node details')
	node_id = node.attr('id');
	node_name = node.children("a").text() ;
	node_type = node.attr('rel');
	anchor = $('#treedetails_fancybox_trigger');
	//anchor_href='create_addtree.html?node_id='+new_node_id+'&node_type='+new_node_type;
	anchor_href='tree_node_details.html?node_id='+node_id+'&node_type='+node_type;
	anchor.attr('href', anchor_href);
	$('a#treedetails_fancybox_trigger').click();
}


//create nodes
function createNode(parent_node_id, text, node_type){

	//console.log(parent_node_id +'--'+text+'---'+node_type);
	node = $('#'+parent_node_id);
	node_id = "node_"+treeCount++;
	new_node_obj = { 
						"data" : text, 
						"attr" : { "class" : "hello", "rel": node_type, "id": node_id }
					}
	$("#course_tree").jstree("create",'#'+parent_node_id,'last',new_node_obj,false,true);
}

