<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ziksana.persistence.security.UserMapper">


	<select id="getMemberByUser" resultMap="memberResultMap"
		parameterType="java.lang.String">

		select 
 		memmember.ID as ID,
		memmemberrole.ID as MemberRoleId,
		memmember.FirstName as FirstName,
		memmember.LastName as LastName,
		memmember.designation as Designation,
		memmember.primaryEmailId as primaryEmailId,
		memmember.userId as userId,
		memmember.active as active,
		memmember.primaryEmailId,
		memmember.PicturePath as PicturePath,
		Role.LookupValue as RoleType,
		Rating.LookupValue as Rating
		from 
		memmember,
		memmemberrole,
		secmembercredential,
		
		
			(
		select
		v.LookupValueId,
		v.LookupValue
		from
		utllookup l join
		utllookupvalue v on
		l.LookupId=v.LookupId
		where
		l.CategoryName='Role Type'

		)Role,
		(
		select
		v.LookupValueId,
		v.LookupValue
		from
		utllookup l join
		utllookupvalue v on
		l.LookupId=v.LookupId
		where
		l.CategoryName='Rating'

		)Rating
		
		WHERE
		memmember.ID=secmembercredential.MemberId and
		memmember.ID=memmemberrole.memberId and
		memmemberrole.RoleType=Role.LookupValueId and
		memmember.rating = Rating.LookupValueId and
		secmembercredential.UserName=#{userName}
		
	</select>
	
	
	<select id="getMemberByEmailId" resultMap="memberResultMap"
		parameterType="java.lang.String">

		select 
 		memmember.ID as MemberId,
		memmemberrole.ID as MemberRoleId,
		memmember.FirstName as FirstName,
		memmember.LastName as LastName,
		memmember.designation as Designation,
		memmember.userId as userId,
		memmember.active as active,
		memmember.primaryEmailId,
		memmember.PicturePath as PicturePath,
		Role.LookupValue as RoleType,
		Rating.LookupValue as Rating
		from 
		memmember,
		memmemberrole,
		secmembercredential,
		
		
			(
		select
		v.LookupValueId,
		v.LookupValue
		from
		utllookup l join
		utllookupvalue v on
		l.LookupId=v.LookupId
		where
		l.CategoryName='Role Type'

		)Role,
		(
		select
		v.LookupValueId,
		v.LookupValue
		from
		utllookup l join
		utllookupvalue v on
		l.LookupId=v.LookupId
		where
		l.CategoryName='Rating'

		)Rating
		
		WHERE
		memmember.ID=secmembercredential.MemberId and
		memmember.ID=memmemberrole.memberId and
		memmemberrole.RoleType=Role.LookupValueId and
		memmember.rating = Rating.LookupValueId and
		memmember.primaryEmailId=#{emailId}
		
	</select>
	<select id="getMemberByMemberId" resultMap="memberResultMap"
		parameterType="java.lang.String">

		select distinct memmember.*, 
		memmemberrole.ID,
		IF(memmemberrole.RoleType=761,'EDUCATOR','LEARNER') AS RoleType
		from memmember,
		memmemberrole,
		secmembercredential
		WHERE
		memmember.ID=secmembercredential.MemberId and
		memmember.ID=memmemberrole.memberId and
		secmembercredential.MemberId=#{memberId}


	</select>
	<select id="isMemberAccountLocked" resultType="java.lang.Integer" parameterType="String">
			select active from memmember where userId=#{username}
	</select>
	<update id="lockMemberAccountByUserId" parameterType="java.lang.String">
		update memmember		
		<set>
			active=1
		</set>
		where userId=#{username}
	</update>
	
	<select id="getPasswordUpdatedOn" resultType="java.lang.String" parameterType="int">
		select CreationDate from secmembercredential where memberId= #{memberId}
	</select>
	
	<update id="updateMemberProfileImage"  parameterType="map">
	update memmember		
		<set>
			PicturePath=#{profileImage}
		</set>
		where ID=#{memberId}
	</update>
	
	<select id="getUserPassword" resultType="java.lang.String" parameterType="String">
		select password from secmembercredential where userName=(select userId from memmember where id=#{userId})     
	</select>
	
	<update id="updateSecMemberCredentional" parameterType="map">
		update secmembercredential		
		<set>
			password=#{newPassword}, CreationDate=now()
		</set>
		where userName=#{userId}
	</update>
	
	<update id="deleteMemberProfileImage" parameterType="int">
		update memmember set PicturePath = null where ID = #{memberId}
	</update>
	
	<select id="isUserNameExists" resultType="java.lang.Boolean" parameterType="String">
		select count(*) from secmembercredential where BINARY userName=#{username}
	</select>
	<select id="isPasswordExists" resultType="java.lang.Boolean" parameterType="String">
		select count(*) from secmembercredential where BINARY password=#{password}
	</select>
	<select id="isPrimaryEmailIdExists" resultType="java.lang.Boolean" parameterType="String">
		select count(*) from memmember where primaryemailId=#{emailId}
		
	</select>
	
	<select id="getUserIdByMember" resultType="java.lang.String" parameterType="int">
			select userId from memmember where ID=#{memberId}
	</select>
	
	<resultMap id="memberResultMap" type="com.ziksana.domain.member.Member">
		<result property="memberId" column="ID" />
		<result property="firstName" column="FirstName" />
		<result property="lastName" column="LastName" />
		<result property="roleType" column="RoleType"/>
		<result property="designation" column="Designation"/>
		<result property="picturePath" column="PicturePath"/>
		<result property="userId" column="userId"/>
		<result property="primaryEmailId" column="primaryEmailId"/>
		<result property="active" column="active"/>
		<result property="rating" column="Rating"/>
		<collection property="memberPersonas"  ofType="com.ziksana.domain.member.MemberPersona" >
		         <result property="memberRoleId" column="MemberRoleId"/>
		         <result property="roleType" column="RoleType"/>         
		         
        
		</collection>

	</resultMap>


	




</mapper>
